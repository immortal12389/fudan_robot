#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class StateRobot(object):
    SR_Start = 0
    SR_Initialize = 1
    SR_Logout = 2
    SR_Login = 3
    SR_PowerOff = 4
    SR_Disable = 5
    SR_Enable = 6

    _VALUES_TO_NAMES = {
        0: "SR_Start",
        1: "SR_Initialize",
        2: "SR_Logout",
        3: "SR_Login",
        4: "SR_PowerOff",
        5: "SR_Disable",
        6: "SR_Enable",
    }

    _NAMES_TO_VALUES = {
        "SR_Start": 0,
        "SR_Initialize": 1,
        "SR_Logout": 2,
        "SR_Login": 3,
        "SR_PowerOff": 4,
        "SR_Disable": 5,
        "SR_Enable": 6,
    }


class StateProgram(object):
    SP_Stopped = 0
    SP_Stopping = 1
    SP_Running = 2
    SP_Paused = 3
    SP_Pausing = 4

    _VALUES_TO_NAMES = {
        0: "SP_Stopped",
        1: "SP_Stopping",
        2: "SP_Running",
        3: "SP_Paused",
        4: "SP_Pausing",
    }

    _NAMES_TO_VALUES = {
        "SP_Stopped": 0,
        "SP_Stopping": 1,
        "SP_Running": 2,
        "SP_Paused": 3,
        "SP_Pausing": 4,
    }


class OperationMode(object):
    kManual = 0
    kAuto = 1
    kRemote = 2

    _VALUES_TO_NAMES = {
        0: "kManual",
        1: "kAuto",
        2: "kRemote",
    }

    _NAMES_TO_VALUES = {
        "kManual": 0,
        "kAuto": 1,
        "kRemote": 2,
    }


class TaskState(object):
    ST_Idle = 0
    ST_Running = 1
    ST_Paused = 2
    ST_Stopped = 3
    ST_Finished = 4
    ST_Interrupt = 5
    ST_Error = 6
    ST_Illegal = 7
    ST_ParameterMismatch = 8

    _VALUES_TO_NAMES = {
        0: "ST_Idle",
        1: "ST_Running",
        2: "ST_Paused",
        3: "ST_Stopped",
        4: "ST_Finished",
        5: "ST_Interrupt",
        6: "ST_Error",
        7: "ST_Illegal",
        8: "ST_ParameterMismatch",
    }

    _NAMES_TO_VALUES = {
        "ST_Idle": 0,
        "ST_Running": 1,
        "ST_Paused": 2,
        "ST_Stopped": 3,
        "ST_Finished": 4,
        "ST_Interrupt": 5,
        "ST_Error": 6,
        "ST_Illegal": 7,
        "ST_ParameterMismatch": 8,
    }


class SafetyState(object):
    SS_INIT = 0
    SS_WAIT = 2
    SS_CONFIG = 3
    SS_POWER_OFF = 4
    SS_RUN = 5
    SS_RECOVERY = 6
    SS_STOP2 = 7
    SS_STOP1 = 8
    SS_STOP0 = 9
    SS_MODEL = 10
    SS_REDUCE = 12
    SS_BOOT = 13
    SS_FAIL = 14
    SS_UPDATE = 99

    _VALUES_TO_NAMES = {
        0: "SS_INIT",
        2: "SS_WAIT",
        3: "SS_CONFIG",
        4: "SS_POWER_OFF",
        5: "SS_RUN",
        6: "SS_RECOVERY",
        7: "SS_STOP2",
        8: "SS_STOP1",
        9: "SS_STOP0",
        10: "SS_MODEL",
        12: "SS_REDUCE",
        13: "SS_BOOT",
        14: "SS_FAIL",
        99: "SS_UPDATE",
    }

    _NAMES_TO_VALUES = {
        "SS_INIT": 0,
        "SS_WAIT": 2,
        "SS_CONFIG": 3,
        "SS_POWER_OFF": 4,
        "SS_RUN": 5,
        "SS_RECOVERY": 6,
        "SS_STOP2": 7,
        "SS_STOP1": 8,
        "SS_STOP0": 9,
        "SS_MODEL": 10,
        "SS_REDUCE": 12,
        "SS_BOOT": 13,
        "SS_FAIL": 14,
        "SS_UPDATE": 99,
    }


class Op(object):
    """
    Attributes:
     - time_or_dist_1
     - trig_io_1
     - trig_value_1
     - trig_time_1
     - trig_dist_1
     - trig_event_1
     - time_or_dist_2
     - trig_io_2
     - trig_value_2
     - trig_time_2
     - trig_dist_2
     - trig_event_2
     - time_or_dist_3
     - trig_io_3
     - trig_value_3
     - trig_time_3
     - trig_dist_3
     - trig_event_3

    """


    def __init__(self, time_or_dist_1=None, trig_io_1=None, trig_value_1=None, trig_time_1=None, trig_dist_1=None, trig_event_1=None, time_or_dist_2=None, trig_io_2=None, trig_value_2=None, trig_time_2=None, trig_dist_2=None, trig_event_2=None, time_or_dist_3=None, trig_io_3=None, trig_value_3=None, trig_time_3=None, trig_dist_3=None, trig_event_3=None,):
        self.time_or_dist_1 = time_or_dist_1
        self.trig_io_1 = trig_io_1
        self.trig_value_1 = trig_value_1
        self.trig_time_1 = trig_time_1
        self.trig_dist_1 = trig_dist_1
        self.trig_event_1 = trig_event_1
        self.time_or_dist_2 = time_or_dist_2
        self.trig_io_2 = trig_io_2
        self.trig_value_2 = trig_value_2
        self.trig_time_2 = trig_time_2
        self.trig_dist_2 = trig_dist_2
        self.trig_event_2 = trig_event_2
        self.time_or_dist_3 = time_or_dist_3
        self.trig_io_3 = trig_io_3
        self.trig_value_3 = trig_value_3
        self.trig_time_3 = trig_time_3
        self.trig_dist_3 = trig_dist_3
        self.trig_event_3 = trig_event_3

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.time_or_dist_1 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.trig_io_1 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.trig_value_1 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.trig_time_1 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.trig_dist_1 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.trig_event_1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BYTE:
                    self.time_or_dist_2 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BYTE:
                    self.trig_io_2 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.trig_value_2 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.trig_time_2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.trig_dist_2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.trig_event_2 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BYTE:
                    self.time_or_dist_3 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BYTE:
                    self.trig_io_3 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.trig_value_3 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.DOUBLE:
                    self.trig_time_3 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.DOUBLE:
                    self.trig_dist_3 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.trig_event_3 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Op')
        if self.time_or_dist_1 is not None:
            oprot.writeFieldBegin('time_or_dist_1', TType.BYTE, 1)
            oprot.writeByte(self.time_or_dist_1)
            oprot.writeFieldEnd()
        if self.trig_io_1 is not None:
            oprot.writeFieldBegin('trig_io_1', TType.BYTE, 2)
            oprot.writeByte(self.trig_io_1)
            oprot.writeFieldEnd()
        if self.trig_value_1 is not None:
            oprot.writeFieldBegin('trig_value_1', TType.BOOL, 3)
            oprot.writeBool(self.trig_value_1)
            oprot.writeFieldEnd()
        if self.trig_time_1 is not None:
            oprot.writeFieldBegin('trig_time_1', TType.DOUBLE, 4)
            oprot.writeDouble(self.trig_time_1)
            oprot.writeFieldEnd()
        if self.trig_dist_1 is not None:
            oprot.writeFieldBegin('trig_dist_1', TType.DOUBLE, 5)
            oprot.writeDouble(self.trig_dist_1)
            oprot.writeFieldEnd()
        if self.trig_event_1 is not None:
            oprot.writeFieldBegin('trig_event_1', TType.STRING, 6)
            oprot.writeString(self.trig_event_1.encode('utf-8') if sys.version_info[0] == 2 else self.trig_event_1)
            oprot.writeFieldEnd()
        if self.time_or_dist_2 is not None:
            oprot.writeFieldBegin('time_or_dist_2', TType.BYTE, 7)
            oprot.writeByte(self.time_or_dist_2)
            oprot.writeFieldEnd()
        if self.trig_io_2 is not None:
            oprot.writeFieldBegin('trig_io_2', TType.BYTE, 8)
            oprot.writeByte(self.trig_io_2)
            oprot.writeFieldEnd()
        if self.trig_value_2 is not None:
            oprot.writeFieldBegin('trig_value_2', TType.BOOL, 9)
            oprot.writeBool(self.trig_value_2)
            oprot.writeFieldEnd()
        if self.trig_time_2 is not None:
            oprot.writeFieldBegin('trig_time_2', TType.DOUBLE, 10)
            oprot.writeDouble(self.trig_time_2)
            oprot.writeFieldEnd()
        if self.trig_dist_2 is not None:
            oprot.writeFieldBegin('trig_dist_2', TType.DOUBLE, 11)
            oprot.writeDouble(self.trig_dist_2)
            oprot.writeFieldEnd()
        if self.trig_event_2 is not None:
            oprot.writeFieldBegin('trig_event_2', TType.STRING, 12)
            oprot.writeString(self.trig_event_2.encode('utf-8') if sys.version_info[0] == 2 else self.trig_event_2)
            oprot.writeFieldEnd()
        if self.time_or_dist_3 is not None:
            oprot.writeFieldBegin('time_or_dist_3', TType.BYTE, 13)
            oprot.writeByte(self.time_or_dist_3)
            oprot.writeFieldEnd()
        if self.trig_io_3 is not None:
            oprot.writeFieldBegin('trig_io_3', TType.BYTE, 14)
            oprot.writeByte(self.trig_io_3)
            oprot.writeFieldEnd()
        if self.trig_value_3 is not None:
            oprot.writeFieldBegin('trig_value_3', TType.BOOL, 15)
            oprot.writeBool(self.trig_value_3)
            oprot.writeFieldEnd()
        if self.trig_time_3 is not None:
            oprot.writeFieldBegin('trig_time_3', TType.DOUBLE, 16)
            oprot.writeDouble(self.trig_time_3)
            oprot.writeFieldEnd()
        if self.trig_dist_3 is not None:
            oprot.writeFieldBegin('trig_dist_3', TType.DOUBLE, 17)
            oprot.writeDouble(self.trig_dist_3)
            oprot.writeFieldEnd()
        if self.trig_event_3 is not None:
            oprot.writeFieldBegin('trig_event_3', TType.STRING, 18)
            oprot.writeString(self.trig_event_3.encode('utf-8') if sys.version_info[0] == 2 else self.trig_event_3)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.time_or_dist_1 is None:
            raise TProtocolException(message='Required field time_or_dist_1 is unset!')
        if self.trig_io_1 is None:
            raise TProtocolException(message='Required field trig_io_1 is unset!')
        if self.trig_value_1 is None:
            raise TProtocolException(message='Required field trig_value_1 is unset!')
        if self.trig_time_1 is None:
            raise TProtocolException(message='Required field trig_time_1 is unset!')
        if self.trig_dist_1 is None:
            raise TProtocolException(message='Required field trig_dist_1 is unset!')
        if self.trig_event_1 is None:
            raise TProtocolException(message='Required field trig_event_1 is unset!')
        if self.time_or_dist_2 is None:
            raise TProtocolException(message='Required field time_or_dist_2 is unset!')
        if self.trig_io_2 is None:
            raise TProtocolException(message='Required field trig_io_2 is unset!')
        if self.trig_value_2 is None:
            raise TProtocolException(message='Required field trig_value_2 is unset!')
        if self.trig_time_2 is None:
            raise TProtocolException(message='Required field trig_time_2 is unset!')
        if self.trig_dist_2 is None:
            raise TProtocolException(message='Required field trig_dist_2 is unset!')
        if self.trig_event_2 is None:
            raise TProtocolException(message='Required field trig_event_2 is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RobotStatus(object):
    """
    Attributes:
     - jointExpectPosition
     - jointExpectVelocity
     - jointExpectAccelera
     - jointActualPosition
     - jointActualVelocity
     - jointActualAccelera
     - jointActualCurrent
     - jointTemperature
     - driverTemperature
     - cartExpectPosition
     - cartExpectVelocity
     - cartExpectAccelera
     - cartActualPosition
     - cartActualVelocity
     - cartActualAccelera
     - slaveReady
     - collision
     - collisionAxis
     - emcStopSignal
     - robotState
     - robotError

    """


    def __init__(self, jointExpectPosition=None, jointExpectVelocity=None, jointExpectAccelera=None, jointActualPosition=None, jointActualVelocity=None, jointActualAccelera=None, jointActualCurrent=None, jointTemperature=None, driverTemperature=None, cartExpectPosition=None, cartExpectVelocity=None, cartExpectAccelera=None, cartActualPosition=None, cartActualVelocity=None, cartActualAccelera=None, slaveReady=None, collision=None, collisionAxis=None, emcStopSignal=None, robotState=None, robotError=None,):
        self.jointExpectPosition = jointExpectPosition
        self.jointExpectVelocity = jointExpectVelocity
        self.jointExpectAccelera = jointExpectAccelera
        self.jointActualPosition = jointActualPosition
        self.jointActualVelocity = jointActualVelocity
        self.jointActualAccelera = jointActualAccelera
        self.jointActualCurrent = jointActualCurrent
        self.jointTemperature = jointTemperature
        self.driverTemperature = driverTemperature
        self.cartExpectPosition = cartExpectPosition
        self.cartExpectVelocity = cartExpectVelocity
        self.cartExpectAccelera = cartExpectAccelera
        self.cartActualPosition = cartActualPosition
        self.cartActualVelocity = cartActualVelocity
        self.cartActualAccelera = cartActualAccelera
        self.slaveReady = slaveReady
        self.collision = collision
        self.collisionAxis = collisionAxis
        self.emcStopSignal = emcStopSignal
        self.robotState = robotState
        self.robotError = robotError

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.jointExpectPosition = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readDouble()
                        self.jointExpectPosition.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.jointExpectVelocity = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readDouble()
                        self.jointExpectVelocity.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.jointExpectAccelera = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readDouble()
                        self.jointExpectAccelera.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.jointActualPosition = []
                    (_etype21, _size18) = iprot.readListBegin()
                    for _i22 in range(_size18):
                        _elem23 = iprot.readDouble()
                        self.jointActualPosition.append(_elem23)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.jointActualVelocity = []
                    (_etype27, _size24) = iprot.readListBegin()
                    for _i28 in range(_size24):
                        _elem29 = iprot.readDouble()
                        self.jointActualVelocity.append(_elem29)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.jointActualAccelera = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = iprot.readDouble()
                        self.jointActualAccelera.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.jointActualCurrent = []
                    (_etype39, _size36) = iprot.readListBegin()
                    for _i40 in range(_size36):
                        _elem41 = iprot.readDouble()
                        self.jointActualCurrent.append(_elem41)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.jointTemperature = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readDouble()
                        self.jointTemperature.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.driverTemperature = []
                    (_etype51, _size48) = iprot.readListBegin()
                    for _i52 in range(_size48):
                        _elem53 = iprot.readDouble()
                        self.driverTemperature.append(_elem53)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.cartExpectPosition = []
                    (_etype57, _size54) = iprot.readListBegin()
                    for _i58 in range(_size54):
                        _elem59 = iprot.readDouble()
                        self.cartExpectPosition.append(_elem59)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.cartExpectVelocity = []
                    (_etype63, _size60) = iprot.readListBegin()
                    for _i64 in range(_size60):
                        _elem65 = iprot.readDouble()
                        self.cartExpectVelocity.append(_elem65)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.cartExpectAccelera = []
                    (_etype69, _size66) = iprot.readListBegin()
                    for _i70 in range(_size66):
                        _elem71 = iprot.readDouble()
                        self.cartExpectAccelera.append(_elem71)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.cartActualPosition = []
                    (_etype75, _size72) = iprot.readListBegin()
                    for _i76 in range(_size72):
                        _elem77 = iprot.readDouble()
                        self.cartActualPosition.append(_elem77)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.cartActualVelocity = []
                    (_etype81, _size78) = iprot.readListBegin()
                    for _i82 in range(_size78):
                        _elem83 = iprot.readDouble()
                        self.cartActualVelocity.append(_elem83)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.cartActualAccelera = []
                    (_etype87, _size84) = iprot.readListBegin()
                    for _i88 in range(_size84):
                        _elem89 = iprot.readDouble()
                        self.cartActualAccelera.append(_elem89)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.slaveReady = []
                    (_etype93, _size90) = iprot.readListBegin()
                    for _i94 in range(_size90):
                        _elem95 = iprot.readBool()
                        self.slaveReady.append(_elem95)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BOOL:
                    self.collision = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BYTE:
                    self.collisionAxis = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.BOOL:
                    self.emcStopSignal = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BYTE:
                    self.robotState = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.robotError = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RobotStatus')
        if self.jointExpectPosition is not None:
            oprot.writeFieldBegin('jointExpectPosition', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.jointExpectPosition))
            for iter96 in self.jointExpectPosition:
                oprot.writeDouble(iter96)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.jointExpectVelocity is not None:
            oprot.writeFieldBegin('jointExpectVelocity', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.jointExpectVelocity))
            for iter97 in self.jointExpectVelocity:
                oprot.writeDouble(iter97)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.jointExpectAccelera is not None:
            oprot.writeFieldBegin('jointExpectAccelera', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.jointExpectAccelera))
            for iter98 in self.jointExpectAccelera:
                oprot.writeDouble(iter98)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.jointActualPosition is not None:
            oprot.writeFieldBegin('jointActualPosition', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.jointActualPosition))
            for iter99 in self.jointActualPosition:
                oprot.writeDouble(iter99)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.jointActualVelocity is not None:
            oprot.writeFieldBegin('jointActualVelocity', TType.LIST, 5)
            oprot.writeListBegin(TType.DOUBLE, len(self.jointActualVelocity))
            for iter100 in self.jointActualVelocity:
                oprot.writeDouble(iter100)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.jointActualAccelera is not None:
            oprot.writeFieldBegin('jointActualAccelera', TType.LIST, 6)
            oprot.writeListBegin(TType.DOUBLE, len(self.jointActualAccelera))
            for iter101 in self.jointActualAccelera:
                oprot.writeDouble(iter101)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.jointActualCurrent is not None:
            oprot.writeFieldBegin('jointActualCurrent', TType.LIST, 7)
            oprot.writeListBegin(TType.DOUBLE, len(self.jointActualCurrent))
            for iter102 in self.jointActualCurrent:
                oprot.writeDouble(iter102)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.jointTemperature is not None:
            oprot.writeFieldBegin('jointTemperature', TType.LIST, 8)
            oprot.writeListBegin(TType.DOUBLE, len(self.jointTemperature))
            for iter103 in self.jointTemperature:
                oprot.writeDouble(iter103)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.driverTemperature is not None:
            oprot.writeFieldBegin('driverTemperature', TType.LIST, 9)
            oprot.writeListBegin(TType.DOUBLE, len(self.driverTemperature))
            for iter104 in self.driverTemperature:
                oprot.writeDouble(iter104)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cartExpectPosition is not None:
            oprot.writeFieldBegin('cartExpectPosition', TType.LIST, 10)
            oprot.writeListBegin(TType.DOUBLE, len(self.cartExpectPosition))
            for iter105 in self.cartExpectPosition:
                oprot.writeDouble(iter105)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cartExpectVelocity is not None:
            oprot.writeFieldBegin('cartExpectVelocity', TType.LIST, 11)
            oprot.writeListBegin(TType.DOUBLE, len(self.cartExpectVelocity))
            for iter106 in self.cartExpectVelocity:
                oprot.writeDouble(iter106)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cartExpectAccelera is not None:
            oprot.writeFieldBegin('cartExpectAccelera', TType.LIST, 12)
            oprot.writeListBegin(TType.DOUBLE, len(self.cartExpectAccelera))
            for iter107 in self.cartExpectAccelera:
                oprot.writeDouble(iter107)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cartActualPosition is not None:
            oprot.writeFieldBegin('cartActualPosition', TType.LIST, 13)
            oprot.writeListBegin(TType.DOUBLE, len(self.cartActualPosition))
            for iter108 in self.cartActualPosition:
                oprot.writeDouble(iter108)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cartActualVelocity is not None:
            oprot.writeFieldBegin('cartActualVelocity', TType.LIST, 14)
            oprot.writeListBegin(TType.DOUBLE, len(self.cartActualVelocity))
            for iter109 in self.cartActualVelocity:
                oprot.writeDouble(iter109)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cartActualAccelera is not None:
            oprot.writeFieldBegin('cartActualAccelera', TType.LIST, 15)
            oprot.writeListBegin(TType.DOUBLE, len(self.cartActualAccelera))
            for iter110 in self.cartActualAccelera:
                oprot.writeDouble(iter110)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.slaveReady is not None:
            oprot.writeFieldBegin('slaveReady', TType.LIST, 16)
            oprot.writeListBegin(TType.BOOL, len(self.slaveReady))
            for iter111 in self.slaveReady:
                oprot.writeBool(iter111)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.collision is not None:
            oprot.writeFieldBegin('collision', TType.BOOL, 17)
            oprot.writeBool(self.collision)
            oprot.writeFieldEnd()
        if self.collisionAxis is not None:
            oprot.writeFieldBegin('collisionAxis', TType.BYTE, 18)
            oprot.writeByte(self.collisionAxis)
            oprot.writeFieldEnd()
        if self.emcStopSignal is not None:
            oprot.writeFieldBegin('emcStopSignal', TType.BOOL, 19)
            oprot.writeBool(self.emcStopSignal)
            oprot.writeFieldEnd()
        if self.robotState is not None:
            oprot.writeFieldBegin('robotState', TType.BYTE, 20)
            oprot.writeByte(self.robotState)
            oprot.writeFieldEnd()
        if self.robotError is not None:
            oprot.writeFieldBegin('robotError', TType.I32, 21)
            oprot.writeI32(self.robotError)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.jointExpectPosition is None:
            raise TProtocolException(message='Required field jointExpectPosition is unset!')
        if self.jointExpectVelocity is None:
            raise TProtocolException(message='Required field jointExpectVelocity is unset!')
        if self.jointExpectAccelera is None:
            raise TProtocolException(message='Required field jointExpectAccelera is unset!')
        if self.jointActualPosition is None:
            raise TProtocolException(message='Required field jointActualPosition is unset!')
        if self.jointActualVelocity is None:
            raise TProtocolException(message='Required field jointActualVelocity is unset!')
        if self.jointActualAccelera is None:
            raise TProtocolException(message='Required field jointActualAccelera is unset!')
        if self.jointActualCurrent is None:
            raise TProtocolException(message='Required field jointActualCurrent is unset!')
        if self.jointTemperature is None:
            raise TProtocolException(message='Required field jointTemperature is unset!')
        if self.driverTemperature is None:
            raise TProtocolException(message='Required field driverTemperature is unset!')
        if self.cartExpectPosition is None:
            raise TProtocolException(message='Required field cartExpectPosition is unset!')
        if self.cartExpectVelocity is None:
            raise TProtocolException(message='Required field cartExpectVelocity is unset!')
        if self.cartExpectAccelera is None:
            raise TProtocolException(message='Required field cartExpectAccelera is unset!')
        if self.cartActualPosition is None:
            raise TProtocolException(message='Required field cartActualPosition is unset!')
        if self.cartActualVelocity is None:
            raise TProtocolException(message='Required field cartActualVelocity is unset!')
        if self.cartActualAccelera is None:
            raise TProtocolException(message='Required field cartActualAccelera is unset!')
        if self.slaveReady is None:
            raise TProtocolException(message='Required field slaveReady is unset!')
        if self.collision is None:
            raise TProtocolException(message='Required field collision is unset!')
        if self.collisionAxis is None:
            raise TProtocolException(message='Required field collisionAxis is unset!')
        if self.emcStopSignal is None:
            raise TProtocolException(message='Required field emcStopSignal is unset!')
        if self.robotState is None:
            raise TProtocolException(message='Required field robotState is unset!')
        if self.robotError is None:
            raise TProtocolException(message='Required field robotError is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IOStatus(object):
    """
    Attributes:
     - analogCurrentOutputs
     - analogVoltageOutputs
     - analogCurrentInputs
     - analogVoltageInputs
     - digitalInputs
     - digitalOutputs
     - toolIOIn
     - toolIOOut
     - toolButton
     - funRegisterInputs
     - funRegisterOutputs
     - boolRegisterInputs
     - boolRegisterOutputs
     - wordRegisterInputs
     - wordRegisterOutputs
     - floatRegisterInputs
     - floatRegisterOutputs

    """


    def __init__(self, analogCurrentOutputs=None, analogVoltageOutputs=None, analogCurrentInputs=None, analogVoltageInputs=None, digitalInputs=None, digitalOutputs=None, toolIOIn=None, toolIOOut=None, toolButton=None, funRegisterInputs=None, funRegisterOutputs=None, boolRegisterInputs=None, boolRegisterOutputs=None, wordRegisterInputs=None, wordRegisterOutputs=None, floatRegisterInputs=None, floatRegisterOutputs=None,):
        self.analogCurrentOutputs = analogCurrentOutputs
        self.analogVoltageOutputs = analogVoltageOutputs
        self.analogCurrentInputs = analogCurrentInputs
        self.analogVoltageInputs = analogVoltageInputs
        self.digitalInputs = digitalInputs
        self.digitalOutputs = digitalOutputs
        self.toolIOIn = toolIOIn
        self.toolIOOut = toolIOOut
        self.toolButton = toolButton
        self.funRegisterInputs = funRegisterInputs
        self.funRegisterOutputs = funRegisterOutputs
        self.boolRegisterInputs = boolRegisterInputs
        self.boolRegisterOutputs = boolRegisterOutputs
        self.wordRegisterInputs = wordRegisterInputs
        self.wordRegisterOutputs = wordRegisterOutputs
        self.floatRegisterInputs = floatRegisterInputs
        self.floatRegisterOutputs = floatRegisterOutputs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.analogCurrentOutputs = []
                    (_etype115, _size112) = iprot.readListBegin()
                    for _i116 in range(_size112):
                        _elem117 = iprot.readDouble()
                        self.analogCurrentOutputs.append(_elem117)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.analogVoltageOutputs = []
                    (_etype121, _size118) = iprot.readListBegin()
                    for _i122 in range(_size118):
                        _elem123 = iprot.readDouble()
                        self.analogVoltageOutputs.append(_elem123)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.analogCurrentInputs = []
                    (_etype127, _size124) = iprot.readListBegin()
                    for _i128 in range(_size124):
                        _elem129 = iprot.readDouble()
                        self.analogCurrentInputs.append(_elem129)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.analogVoltageInputs = []
                    (_etype133, _size130) = iprot.readListBegin()
                    for _i134 in range(_size130):
                        _elem135 = iprot.readDouble()
                        self.analogVoltageInputs.append(_elem135)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.digitalInputs = []
                    (_etype139, _size136) = iprot.readListBegin()
                    for _i140 in range(_size136):
                        _elem141 = iprot.readBool()
                        self.digitalInputs.append(_elem141)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.digitalOutputs = []
                    (_etype145, _size142) = iprot.readListBegin()
                    for _i146 in range(_size142):
                        _elem147 = iprot.readBool()
                        self.digitalOutputs.append(_elem147)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.toolIOIn = []
                    (_etype151, _size148) = iprot.readListBegin()
                    for _i152 in range(_size148):
                        _elem153 = iprot.readBool()
                        self.toolIOIn.append(_elem153)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.toolIOOut = []
                    (_etype157, _size154) = iprot.readListBegin()
                    for _i158 in range(_size154):
                        _elem159 = iprot.readBool()
                        self.toolIOOut.append(_elem159)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.toolButton = []
                    (_etype163, _size160) = iprot.readListBegin()
                    for _i164 in range(_size160):
                        _elem165 = iprot.readBool()
                        self.toolButton.append(_elem165)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.funRegisterInputs = []
                    (_etype169, _size166) = iprot.readListBegin()
                    for _i170 in range(_size166):
                        _elem171 = iprot.readBool()
                        self.funRegisterInputs.append(_elem171)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.funRegisterOutputs = []
                    (_etype175, _size172) = iprot.readListBegin()
                    for _i176 in range(_size172):
                        _elem177 = iprot.readBool()
                        self.funRegisterOutputs.append(_elem177)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.boolRegisterInputs = []
                    (_etype181, _size178) = iprot.readListBegin()
                    for _i182 in range(_size178):
                        _elem183 = iprot.readBool()
                        self.boolRegisterInputs.append(_elem183)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.boolRegisterOutputs = []
                    (_etype187, _size184) = iprot.readListBegin()
                    for _i188 in range(_size184):
                        _elem189 = iprot.readBool()
                        self.boolRegisterOutputs.append(_elem189)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.wordRegisterInputs = []
                    (_etype193, _size190) = iprot.readListBegin()
                    for _i194 in range(_size190):
                        _elem195 = iprot.readI16()
                        self.wordRegisterInputs.append(_elem195)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.wordRegisterOutputs = []
                    (_etype199, _size196) = iprot.readListBegin()
                    for _i200 in range(_size196):
                        _elem201 = iprot.readI16()
                        self.wordRegisterOutputs.append(_elem201)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.floatRegisterInputs = []
                    (_etype205, _size202) = iprot.readListBegin()
                    for _i206 in range(_size202):
                        _elem207 = iprot.readDouble()
                        self.floatRegisterInputs.append(_elem207)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.LIST:
                    self.floatRegisterOutputs = []
                    (_etype211, _size208) = iprot.readListBegin()
                    for _i212 in range(_size208):
                        _elem213 = iprot.readDouble()
                        self.floatRegisterOutputs.append(_elem213)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IOStatus')
        if self.analogCurrentOutputs is not None:
            oprot.writeFieldBegin('analogCurrentOutputs', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.analogCurrentOutputs))
            for iter214 in self.analogCurrentOutputs:
                oprot.writeDouble(iter214)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.analogVoltageOutputs is not None:
            oprot.writeFieldBegin('analogVoltageOutputs', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.analogVoltageOutputs))
            for iter215 in self.analogVoltageOutputs:
                oprot.writeDouble(iter215)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.analogCurrentInputs is not None:
            oprot.writeFieldBegin('analogCurrentInputs', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.analogCurrentInputs))
            for iter216 in self.analogCurrentInputs:
                oprot.writeDouble(iter216)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.analogVoltageInputs is not None:
            oprot.writeFieldBegin('analogVoltageInputs', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.analogVoltageInputs))
            for iter217 in self.analogVoltageInputs:
                oprot.writeDouble(iter217)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.digitalInputs is not None:
            oprot.writeFieldBegin('digitalInputs', TType.LIST, 5)
            oprot.writeListBegin(TType.BOOL, len(self.digitalInputs))
            for iter218 in self.digitalInputs:
                oprot.writeBool(iter218)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.digitalOutputs is not None:
            oprot.writeFieldBegin('digitalOutputs', TType.LIST, 6)
            oprot.writeListBegin(TType.BOOL, len(self.digitalOutputs))
            for iter219 in self.digitalOutputs:
                oprot.writeBool(iter219)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.toolIOIn is not None:
            oprot.writeFieldBegin('toolIOIn', TType.LIST, 7)
            oprot.writeListBegin(TType.BOOL, len(self.toolIOIn))
            for iter220 in self.toolIOIn:
                oprot.writeBool(iter220)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.toolIOOut is not None:
            oprot.writeFieldBegin('toolIOOut', TType.LIST, 8)
            oprot.writeListBegin(TType.BOOL, len(self.toolIOOut))
            for iter221 in self.toolIOOut:
                oprot.writeBool(iter221)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.toolButton is not None:
            oprot.writeFieldBegin('toolButton', TType.LIST, 9)
            oprot.writeListBegin(TType.BOOL, len(self.toolButton))
            for iter222 in self.toolButton:
                oprot.writeBool(iter222)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.funRegisterInputs is not None:
            oprot.writeFieldBegin('funRegisterInputs', TType.LIST, 10)
            oprot.writeListBegin(TType.BOOL, len(self.funRegisterInputs))
            for iter223 in self.funRegisterInputs:
                oprot.writeBool(iter223)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.funRegisterOutputs is not None:
            oprot.writeFieldBegin('funRegisterOutputs', TType.LIST, 11)
            oprot.writeListBegin(TType.BOOL, len(self.funRegisterOutputs))
            for iter224 in self.funRegisterOutputs:
                oprot.writeBool(iter224)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.boolRegisterInputs is not None:
            oprot.writeFieldBegin('boolRegisterInputs', TType.LIST, 12)
            oprot.writeListBegin(TType.BOOL, len(self.boolRegisterInputs))
            for iter225 in self.boolRegisterInputs:
                oprot.writeBool(iter225)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.boolRegisterOutputs is not None:
            oprot.writeFieldBegin('boolRegisterOutputs', TType.LIST, 13)
            oprot.writeListBegin(TType.BOOL, len(self.boolRegisterOutputs))
            for iter226 in self.boolRegisterOutputs:
                oprot.writeBool(iter226)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.wordRegisterInputs is not None:
            oprot.writeFieldBegin('wordRegisterInputs', TType.LIST, 14)
            oprot.writeListBegin(TType.I16, len(self.wordRegisterInputs))
            for iter227 in self.wordRegisterInputs:
                oprot.writeI16(iter227)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.wordRegisterOutputs is not None:
            oprot.writeFieldBegin('wordRegisterOutputs', TType.LIST, 15)
            oprot.writeListBegin(TType.I16, len(self.wordRegisterOutputs))
            for iter228 in self.wordRegisterOutputs:
                oprot.writeI16(iter228)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.floatRegisterInputs is not None:
            oprot.writeFieldBegin('floatRegisterInputs', TType.LIST, 16)
            oprot.writeListBegin(TType.DOUBLE, len(self.floatRegisterInputs))
            for iter229 in self.floatRegisterInputs:
                oprot.writeDouble(iter229)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.floatRegisterOutputs is not None:
            oprot.writeFieldBegin('floatRegisterOutputs', TType.LIST, 17)
            oprot.writeListBegin(TType.DOUBLE, len(self.floatRegisterOutputs))
            for iter230 in self.floatRegisterOutputs:
                oprot.writeDouble(iter230)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.analogCurrentOutputs is None:
            raise TProtocolException(message='Required field analogCurrentOutputs is unset!')
        if self.analogVoltageOutputs is None:
            raise TProtocolException(message='Required field analogVoltageOutputs is unset!')
        if self.analogCurrentInputs is None:
            raise TProtocolException(message='Required field analogCurrentInputs is unset!')
        if self.analogVoltageInputs is None:
            raise TProtocolException(message='Required field analogVoltageInputs is unset!')
        if self.digitalInputs is None:
            raise TProtocolException(message='Required field digitalInputs is unset!')
        if self.digitalOutputs is None:
            raise TProtocolException(message='Required field digitalOutputs is unset!')
        if self.toolIOIn is None:
            raise TProtocolException(message='Required field toolIOIn is unset!')
        if self.toolIOOut is None:
            raise TProtocolException(message='Required field toolIOOut is unset!')
        if self.toolButton is None:
            raise TProtocolException(message='Required field toolButton is unset!')
        if self.funRegisterInputs is None:
            raise TProtocolException(message='Required field funRegisterInputs is unset!')
        if self.funRegisterOutputs is None:
            raise TProtocolException(message='Required field funRegisterOutputs is unset!')
        if self.boolRegisterInputs is None:
            raise TProtocolException(message='Required field boolRegisterInputs is unset!')
        if self.boolRegisterOutputs is None:
            raise TProtocolException(message='Required field boolRegisterOutputs is unset!')
        if self.wordRegisterInputs is None:
            raise TProtocolException(message='Required field wordRegisterInputs is unset!')
        if self.wordRegisterOutputs is None:
            raise TProtocolException(message='Required field wordRegisterOutputs is unset!')
        if self.floatRegisterInputs is None:
            raise TProtocolException(message='Required field floatRegisterInputs is unset!')
        if self.floatRegisterOutputs is None:
            raise TProtocolException(message='Required field floatRegisterOutputs is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EAxisParam(object):
    """
    Attributes:
     - type
     - mode
     - ref_velo
     - ref_acc
     - ref_jerk
     - max_velo
     - max_acc
     - encoder_type
     - encoder_resolution
     - position_bias
     - screw_lead
     - invert
     - position_limit

    """


    def __init__(self, type=None, mode=None, ref_velo=None, ref_acc=None, ref_jerk=None, max_velo=None, max_acc=None, encoder_type=None, encoder_resolution=None, position_bias=None, screw_lead=None, invert=None, position_limit=None,):
        self.type = type
        self.mode = mode
        self.ref_velo = ref_velo
        self.ref_acc = ref_acc
        self.ref_jerk = ref_jerk
        self.max_velo = max_velo
        self.max_acc = max_acc
        self.encoder_type = encoder_type
        self.encoder_resolution = encoder_resolution
        self.position_bias = position_bias
        self.screw_lead = screw_lead
        self.invert = invert
        self.position_limit = position_limit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.ref_velo = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.ref_acc = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.ref_jerk = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.max_velo = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.max_acc = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.encoder_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.encoder_resolution = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.position_bias = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.screw_lead = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.invert = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.position_limit = []
                    (_etype234, _size231) = iprot.readListBegin()
                    for _i235 in range(_size231):
                        _elem236 = iprot.readDouble()
                        self.position_limit.append(_elem236)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EAxisParam')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 2)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        if self.ref_velo is not None:
            oprot.writeFieldBegin('ref_velo', TType.DOUBLE, 3)
            oprot.writeDouble(self.ref_velo)
            oprot.writeFieldEnd()
        if self.ref_acc is not None:
            oprot.writeFieldBegin('ref_acc', TType.DOUBLE, 4)
            oprot.writeDouble(self.ref_acc)
            oprot.writeFieldEnd()
        if self.ref_jerk is not None:
            oprot.writeFieldBegin('ref_jerk', TType.DOUBLE, 5)
            oprot.writeDouble(self.ref_jerk)
            oprot.writeFieldEnd()
        if self.max_velo is not None:
            oprot.writeFieldBegin('max_velo', TType.DOUBLE, 6)
            oprot.writeDouble(self.max_velo)
            oprot.writeFieldEnd()
        if self.max_acc is not None:
            oprot.writeFieldBegin('max_acc', TType.DOUBLE, 7)
            oprot.writeDouble(self.max_acc)
            oprot.writeFieldEnd()
        if self.encoder_type is not None:
            oprot.writeFieldBegin('encoder_type', TType.I32, 8)
            oprot.writeI32(self.encoder_type)
            oprot.writeFieldEnd()
        if self.encoder_resolution is not None:
            oprot.writeFieldBegin('encoder_resolution', TType.I32, 9)
            oprot.writeI32(self.encoder_resolution)
            oprot.writeFieldEnd()
        if self.position_bias is not None:
            oprot.writeFieldBegin('position_bias', TType.DOUBLE, 10)
            oprot.writeDouble(self.position_bias)
            oprot.writeFieldEnd()
        if self.screw_lead is not None:
            oprot.writeFieldBegin('screw_lead', TType.DOUBLE, 11)
            oprot.writeDouble(self.screw_lead)
            oprot.writeFieldEnd()
        if self.invert is not None:
            oprot.writeFieldBegin('invert', TType.BOOL, 12)
            oprot.writeBool(self.invert)
            oprot.writeFieldEnd()
        if self.position_limit is not None:
            oprot.writeFieldBegin('position_limit', TType.LIST, 13)
            oprot.writeListBegin(TType.DOUBLE, len(self.position_limit))
            for iter237 in self.position_limit:
                oprot.writeDouble(iter237)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.mode is None:
            raise TProtocolException(message='Required field mode is unset!')
        if self.ref_velo is None:
            raise TProtocolException(message='Required field ref_velo is unset!')
        if self.ref_acc is None:
            raise TProtocolException(message='Required field ref_acc is unset!')
        if self.ref_jerk is None:
            raise TProtocolException(message='Required field ref_jerk is unset!')
        if self.max_velo is None:
            raise TProtocolException(message='Required field max_velo is unset!')
        if self.max_acc is None:
            raise TProtocolException(message='Required field max_acc is unset!')
        if self.encoder_type is None:
            raise TProtocolException(message='Required field encoder_type is unset!')
        if self.encoder_resolution is None:
            raise TProtocolException(message='Required field encoder_resolution is unset!')
        if self.position_bias is None:
            raise TProtocolException(message='Required field position_bias is unset!')
        if self.screw_lead is None:
            raise TProtocolException(message='Required field screw_lead is unset!')
        if self.invert is None:
            raise TProtocolException(message='Required field invert is unset!')
        if self.position_limit is None:
            raise TProtocolException(message='Required field position_limit is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EAxisSchemeParam(object):
    """
    Attributes:
     - type
     - axis_link
     - base
     - dh
     - install

    """


    def __init__(self, type=None, axis_link=None, base=None, dh=None, install=None,):
        self.type = type
        self.axis_link = axis_link
        self.base = base
        self.dh = dh
        self.install = install

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.axis_link = []
                    (_etype241, _size238) = iprot.readListBegin()
                    for _i242 in range(_size238):
                        _elem243 = iprot.readI32()
                        self.axis_link.append(_elem243)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.base = []
                    (_etype247, _size244) = iprot.readListBegin()
                    for _i248 in range(_size244):
                        _elem249 = iprot.readDouble()
                        self.base.append(_elem249)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.dh = []
                    (_etype253, _size250) = iprot.readListBegin()
                    for _i254 in range(_size250):
                        _elem255 = []
                        (_etype259, _size256) = iprot.readListBegin()
                        for _i260 in range(_size256):
                            _elem261 = iprot.readDouble()
                            _elem255.append(_elem261)
                        iprot.readListEnd()
                        self.dh.append(_elem255)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.install = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EAxisSchemeParam')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.axis_link is not None:
            oprot.writeFieldBegin('axis_link', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.axis_link))
            for iter262 in self.axis_link:
                oprot.writeI32(iter262)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.base is not None:
            oprot.writeFieldBegin('base', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.base))
            for iter263 in self.base:
                oprot.writeDouble(iter263)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dh is not None:
            oprot.writeFieldBegin('dh', TType.LIST, 4)
            oprot.writeListBegin(TType.LIST, len(self.dh))
            for iter264 in self.dh:
                oprot.writeListBegin(TType.DOUBLE, len(iter264))
                for iter265 in iter264:
                    oprot.writeDouble(iter265)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.install is not None:
            oprot.writeFieldBegin('install', TType.I32, 5)
            oprot.writeI32(self.install)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.axis_link is None:
            raise TProtocolException(message='Required field axis_link is unset!')
        if self.base is None:
            raise TProtocolException(message='Required field base is unset!')
        if self.dh is None:
            raise TProtocolException(message='Required field dh is unset!')
        if self.install is None:
            raise TProtocolException(message='Required field install is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MoveJogTaskParam(object):
    """
    Attributes:
     - jog_direction
     - jog_type
     - axis_num
     - vel
     - jog_coordinate
     - use_step
     - step_jointValue
     - step_cartvalue

    """


    def __init__(self, jog_direction=None, jog_type=None, axis_num=None, vel=None, jog_coordinate=None, use_step=None, step_jointValue=None, step_cartvalue=None,):
        self.jog_direction = jog_direction
        self.jog_type = jog_type
        self.axis_num = axis_num
        self.vel = vel
        self.jog_coordinate = jog_coordinate
        self.use_step = use_step
        self.step_jointValue = step_jointValue
        self.step_cartvalue = step_cartvalue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.jog_direction = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.jog_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.axis_num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.vel = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.jog_coordinate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.use_step = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.step_jointValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.step_cartvalue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MoveJogTaskParam')
        if self.jog_direction is not None:
            oprot.writeFieldBegin('jog_direction', TType.I32, 1)
            oprot.writeI32(self.jog_direction)
            oprot.writeFieldEnd()
        if self.jog_type is not None:
            oprot.writeFieldBegin('jog_type', TType.I32, 2)
            oprot.writeI32(self.jog_type)
            oprot.writeFieldEnd()
        if self.axis_num is not None:
            oprot.writeFieldBegin('axis_num', TType.I32, 3)
            oprot.writeI32(self.axis_num)
            oprot.writeFieldEnd()
        if self.vel is not None:
            oprot.writeFieldBegin('vel', TType.DOUBLE, 4)
            oprot.writeDouble(self.vel)
            oprot.writeFieldEnd()
        if self.jog_coordinate is not None:
            oprot.writeFieldBegin('jog_coordinate', TType.I32, 5)
            oprot.writeI32(self.jog_coordinate)
            oprot.writeFieldEnd()
        if self.use_step is not None:
            oprot.writeFieldBegin('use_step', TType.BOOL, 6)
            oprot.writeBool(self.use_step)
            oprot.writeFieldEnd()
        if self.step_jointValue is not None:
            oprot.writeFieldBegin('step_jointValue', TType.DOUBLE, 7)
            oprot.writeDouble(self.step_jointValue)
            oprot.writeFieldEnd()
        if self.step_cartvalue is not None:
            oprot.writeFieldBegin('step_cartvalue', TType.DOUBLE, 8)
            oprot.writeDouble(self.step_cartvalue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.jog_direction is None:
            raise TProtocolException(message='Required field jog_direction is unset!')
        if self.jog_type is None:
            raise TProtocolException(message='Required field jog_type is unset!')
        if self.axis_num is None:
            raise TProtocolException(message='Required field axis_num is unset!')
        if self.vel is None:
            raise TProtocolException(message='Required field vel is unset!')
        if self.jog_coordinate is None:
            raise TProtocolException(message='Required field jog_coordinate is unset!')
        if self.use_step is None:
            raise TProtocolException(message='Required field use_step is unset!')
        if self.step_jointValue is None:
            raise TProtocolException(message='Required field step_jointValue is unset!')
        if self.step_cartvalue is None:
            raise TProtocolException(message='Required field step_cartvalue is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReachabilityParam(object):
    """
    Attributes:
     - result
     - joints_pos

    """


    def __init__(self, result=None, joints_pos=None,):
        self.result = result
        self.joints_pos = joints_pos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.result = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.joints_pos = []
                    (_etype269, _size266) = iprot.readListBegin()
                    for _i270 in range(_size266):
                        _elem271 = []
                        (_etype275, _size272) = iprot.readListBegin()
                        for _i276 in range(_size272):
                            _elem277 = iprot.readDouble()
                            _elem271.append(_elem277)
                        iprot.readListEnd()
                        self.joints_pos.append(_elem271)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReachabilityParam')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.BOOL, 1)
            oprot.writeBool(self.result)
            oprot.writeFieldEnd()
        if self.joints_pos is not None:
            oprot.writeFieldBegin('joints_pos', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.joints_pos))
            for iter278 in self.joints_pos:
                oprot.writeListBegin(TType.DOUBLE, len(iter278))
                for iter279 in iter278:
                    oprot.writeDouble(iter279)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.result is None:
            raise TProtocolException(message='Required field result is unset!')
        if self.joints_pos is None:
            raise TProtocolException(message='Required field joints_pos is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EAxissInfo(object):
    """
    Attributes:
     - scheme_name
     - status
     - pos

    """


    def __init__(self, scheme_name=None, status=None, pos=None,):
        self.scheme_name = scheme_name
        self.status = status
        self.pos = pos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.scheme_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.pos = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EAxissInfo')
        if self.scheme_name is not None:
            oprot.writeFieldBegin('scheme_name', TType.STRING, 1)
            oprot.writeString(self.scheme_name.encode('utf-8') if sys.version_info[0] == 2 else self.scheme_name)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.pos is not None:
            oprot.writeFieldBegin('pos', TType.DOUBLE, 3)
            oprot.writeDouble(self.pos)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.scheme_name is None:
            raise TProtocolException(message='Required field scheme_name is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.pos is None:
            raise TProtocolException(message='Required field pos is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RealTimeControlData(object):
    """
    Attributes:
     - joint_pos_cmd
     - joint_vel_cmd
     - joint_torq_cmd
     - cart_pos_tool_wobj_cmd
     - cart_vel_tool_wobj_cmd
     - cart_ft_cmd
     - status

    """


    def __init__(self, joint_pos_cmd=None, joint_vel_cmd=None, joint_torq_cmd=None, cart_pos_tool_wobj_cmd=None, cart_vel_tool_wobj_cmd=None, cart_ft_cmd=None, status=None,):
        self.joint_pos_cmd = joint_pos_cmd
        self.joint_vel_cmd = joint_vel_cmd
        self.joint_torq_cmd = joint_torq_cmd
        self.cart_pos_tool_wobj_cmd = cart_pos_tool_wobj_cmd
        self.cart_vel_tool_wobj_cmd = cart_vel_tool_wobj_cmd
        self.cart_ft_cmd = cart_ft_cmd
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.joint_pos_cmd = []
                    (_etype283, _size280) = iprot.readListBegin()
                    for _i284 in range(_size280):
                        _elem285 = iprot.readDouble()
                        self.joint_pos_cmd.append(_elem285)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.joint_vel_cmd = []
                    (_etype289, _size286) = iprot.readListBegin()
                    for _i290 in range(_size286):
                        _elem291 = iprot.readDouble()
                        self.joint_vel_cmd.append(_elem291)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.joint_torq_cmd = []
                    (_etype295, _size292) = iprot.readListBegin()
                    for _i296 in range(_size292):
                        _elem297 = iprot.readDouble()
                        self.joint_torq_cmd.append(_elem297)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.cart_pos_tool_wobj_cmd = []
                    (_etype301, _size298) = iprot.readListBegin()
                    for _i302 in range(_size298):
                        _elem303 = iprot.readDouble()
                        self.cart_pos_tool_wobj_cmd.append(_elem303)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.cart_vel_tool_wobj_cmd = []
                    (_etype307, _size304) = iprot.readListBegin()
                    for _i308 in range(_size304):
                        _elem309 = iprot.readDouble()
                        self.cart_vel_tool_wobj_cmd.append(_elem309)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.cart_ft_cmd = []
                    (_etype313, _size310) = iprot.readListBegin()
                    for _i314 in range(_size310):
                        _elem315 = iprot.readDouble()
                        self.cart_ft_cmd.append(_elem315)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RealTimeControlData')
        if self.joint_pos_cmd is not None:
            oprot.writeFieldBegin('joint_pos_cmd', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.joint_pos_cmd))
            for iter316 in self.joint_pos_cmd:
                oprot.writeDouble(iter316)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.joint_vel_cmd is not None:
            oprot.writeFieldBegin('joint_vel_cmd', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.joint_vel_cmd))
            for iter317 in self.joint_vel_cmd:
                oprot.writeDouble(iter317)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.joint_torq_cmd is not None:
            oprot.writeFieldBegin('joint_torq_cmd', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.joint_torq_cmd))
            for iter318 in self.joint_torq_cmd:
                oprot.writeDouble(iter318)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cart_pos_tool_wobj_cmd is not None:
            oprot.writeFieldBegin('cart_pos_tool_wobj_cmd', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.cart_pos_tool_wobj_cmd))
            for iter319 in self.cart_pos_tool_wobj_cmd:
                oprot.writeDouble(iter319)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cart_vel_tool_wobj_cmd is not None:
            oprot.writeFieldBegin('cart_vel_tool_wobj_cmd', TType.LIST, 5)
            oprot.writeListBegin(TType.DOUBLE, len(self.cart_vel_tool_wobj_cmd))
            for iter320 in self.cart_vel_tool_wobj_cmd:
                oprot.writeDouble(iter320)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cart_ft_cmd is not None:
            oprot.writeFieldBegin('cart_ft_cmd', TType.LIST, 6)
            oprot.writeListBegin(TType.DOUBLE, len(self.cart_ft_cmd))
            for iter321 in self.cart_ft_cmd:
                oprot.writeDouble(iter321)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BOOL, 7)
            oprot.writeBool(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.joint_pos_cmd is None:
            raise TProtocolException(message='Required field joint_pos_cmd is unset!')
        if self.joint_vel_cmd is None:
            raise TProtocolException(message='Required field joint_vel_cmd is unset!')
        if self.joint_torq_cmd is None:
            raise TProtocolException(message='Required field joint_torq_cmd is unset!')
        if self.cart_pos_tool_wobj_cmd is None:
            raise TProtocolException(message='Required field cart_pos_tool_wobj_cmd is unset!')
        if self.cart_vel_tool_wobj_cmd is None:
            raise TProtocolException(message='Required field cart_vel_tool_wobj_cmd is unset!')
        if self.cart_ft_cmd is None:
            raise TProtocolException(message='Required field cart_ft_cmd is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PointOp(object):
    """
    Attributes:
     - pos
     - op

    """


    def __init__(self, pos=None, op=None,):
        self.pos = pos
        self.op = op

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.pos = []
                    (_etype325, _size322) = iprot.readListBegin()
                    for _i326 in range(_size322):
                        _elem327 = iprot.readDouble()
                        self.pos.append(_elem327)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.op = Op()
                    self.op.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PointOp')
        if self.pos is not None:
            oprot.writeFieldBegin('pos', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.pos))
            for iter328 in self.pos:
                oprot.writeDouble(iter328)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.op is not None:
            oprot.writeFieldBegin('op', TType.STRUCT, 2)
            self.op.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.pos is None:
            raise TProtocolException(message='Required field pos is unset!')
        if self.op is None:
            raise TProtocolException(message='Required field op is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Op)
Op.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'time_or_dist_1', None, None, ),  # 1
    (2, TType.BYTE, 'trig_io_1', None, None, ),  # 2
    (3, TType.BOOL, 'trig_value_1', None, None, ),  # 3
    (4, TType.DOUBLE, 'trig_time_1', None, None, ),  # 4
    (5, TType.DOUBLE, 'trig_dist_1', None, None, ),  # 5
    (6, TType.STRING, 'trig_event_1', 'UTF8', None, ),  # 6
    (7, TType.BYTE, 'time_or_dist_2', None, None, ),  # 7
    (8, TType.BYTE, 'trig_io_2', None, None, ),  # 8
    (9, TType.BOOL, 'trig_value_2', None, None, ),  # 9
    (10, TType.DOUBLE, 'trig_time_2', None, None, ),  # 10
    (11, TType.DOUBLE, 'trig_dist_2', None, None, ),  # 11
    (12, TType.STRING, 'trig_event_2', 'UTF8', None, ),  # 12
    (13, TType.BYTE, 'time_or_dist_3', None, None, ),  # 13
    (14, TType.BYTE, 'trig_io_3', None, None, ),  # 14
    (15, TType.BOOL, 'trig_value_3', None, None, ),  # 15
    (16, TType.DOUBLE, 'trig_time_3', None, None, ),  # 16
    (17, TType.DOUBLE, 'trig_dist_3', None, None, ),  # 17
    (18, TType.STRING, 'trig_event_3', 'UTF8', None, ),  # 18
)
all_structs.append(RobotStatus)
RobotStatus.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'jointExpectPosition', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'jointExpectVelocity', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'jointExpectAccelera', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'jointActualPosition', (TType.DOUBLE, None, False), None, ),  # 4
    (5, TType.LIST, 'jointActualVelocity', (TType.DOUBLE, None, False), None, ),  # 5
    (6, TType.LIST, 'jointActualAccelera', (TType.DOUBLE, None, False), None, ),  # 6
    (7, TType.LIST, 'jointActualCurrent', (TType.DOUBLE, None, False), None, ),  # 7
    (8, TType.LIST, 'jointTemperature', (TType.DOUBLE, None, False), None, ),  # 8
    (9, TType.LIST, 'driverTemperature', (TType.DOUBLE, None, False), None, ),  # 9
    (10, TType.LIST, 'cartExpectPosition', (TType.DOUBLE, None, False), None, ),  # 10
    (11, TType.LIST, 'cartExpectVelocity', (TType.DOUBLE, None, False), None, ),  # 11
    (12, TType.LIST, 'cartExpectAccelera', (TType.DOUBLE, None, False), None, ),  # 12
    (13, TType.LIST, 'cartActualPosition', (TType.DOUBLE, None, False), None, ),  # 13
    (14, TType.LIST, 'cartActualVelocity', (TType.DOUBLE, None, False), None, ),  # 14
    (15, TType.LIST, 'cartActualAccelera', (TType.DOUBLE, None, False), None, ),  # 15
    (16, TType.LIST, 'slaveReady', (TType.BOOL, None, False), None, ),  # 16
    (17, TType.BOOL, 'collision', None, None, ),  # 17
    (18, TType.BYTE, 'collisionAxis', None, None, ),  # 18
    (19, TType.BOOL, 'emcStopSignal', None, None, ),  # 19
    (20, TType.BYTE, 'robotState', None, None, ),  # 20
    (21, TType.I32, 'robotError', None, None, ),  # 21
)
all_structs.append(IOStatus)
IOStatus.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'analogCurrentOutputs', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'analogVoltageOutputs', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'analogCurrentInputs', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'analogVoltageInputs', (TType.DOUBLE, None, False), None, ),  # 4
    (5, TType.LIST, 'digitalInputs', (TType.BOOL, None, False), None, ),  # 5
    (6, TType.LIST, 'digitalOutputs', (TType.BOOL, None, False), None, ),  # 6
    (7, TType.LIST, 'toolIOIn', (TType.BOOL, None, False), None, ),  # 7
    (8, TType.LIST, 'toolIOOut', (TType.BOOL, None, False), None, ),  # 8
    (9, TType.LIST, 'toolButton', (TType.BOOL, None, False), None, ),  # 9
    (10, TType.LIST, 'funRegisterInputs', (TType.BOOL, None, False), None, ),  # 10
    (11, TType.LIST, 'funRegisterOutputs', (TType.BOOL, None, False), None, ),  # 11
    (12, TType.LIST, 'boolRegisterInputs', (TType.BOOL, None, False), None, ),  # 12
    (13, TType.LIST, 'boolRegisterOutputs', (TType.BOOL, None, False), None, ),  # 13
    (14, TType.LIST, 'wordRegisterInputs', (TType.I16, None, False), None, ),  # 14
    (15, TType.LIST, 'wordRegisterOutputs', (TType.I16, None, False), None, ),  # 15
    (16, TType.LIST, 'floatRegisterInputs', (TType.DOUBLE, None, False), None, ),  # 16
    (17, TType.LIST, 'floatRegisterOutputs', (TType.DOUBLE, None, False), None, ),  # 17
)
all_structs.append(EAxisParam)
EAxisParam.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.I32, 'mode', None, None, ),  # 2
    (3, TType.DOUBLE, 'ref_velo', None, None, ),  # 3
    (4, TType.DOUBLE, 'ref_acc', None, None, ),  # 4
    (5, TType.DOUBLE, 'ref_jerk', None, None, ),  # 5
    (6, TType.DOUBLE, 'max_velo', None, None, ),  # 6
    (7, TType.DOUBLE, 'max_acc', None, None, ),  # 7
    (8, TType.I32, 'encoder_type', None, None, ),  # 8
    (9, TType.I32, 'encoder_resolution', None, None, ),  # 9
    (10, TType.DOUBLE, 'position_bias', None, None, ),  # 10
    (11, TType.DOUBLE, 'screw_lead', None, None, ),  # 11
    (12, TType.BOOL, 'invert', None, None, ),  # 12
    (13, TType.LIST, 'position_limit', (TType.DOUBLE, None, False), None, ),  # 13
)
all_structs.append(EAxisSchemeParam)
EAxisSchemeParam.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.LIST, 'axis_link', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'base', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'dh', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 4
    (5, TType.I32, 'install', None, None, ),  # 5
)
all_structs.append(MoveJogTaskParam)
MoveJogTaskParam.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'jog_direction', None, None, ),  # 1
    (2, TType.I32, 'jog_type', None, None, ),  # 2
    (3, TType.I32, 'axis_num', None, None, ),  # 3
    (4, TType.DOUBLE, 'vel', None, None, ),  # 4
    (5, TType.I32, 'jog_coordinate', None, None, ),  # 5
    (6, TType.BOOL, 'use_step', None, None, ),  # 6
    (7, TType.DOUBLE, 'step_jointValue', None, None, ),  # 7
    (8, TType.DOUBLE, 'step_cartvalue', None, None, ),  # 8
)
all_structs.append(ReachabilityParam)
ReachabilityParam.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'result', None, None, ),  # 1
    (2, TType.LIST, 'joints_pos', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 2
)
all_structs.append(EAxissInfo)
EAxissInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'scheme_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'pos', None, None, ),  # 3
)
all_structs.append(RealTimeControlData)
RealTimeControlData.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'joint_pos_cmd', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'joint_vel_cmd', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'joint_torq_cmd', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'cart_pos_tool_wobj_cmd', (TType.DOUBLE, None, False), None, ),  # 4
    (5, TType.LIST, 'cart_vel_tool_wobj_cmd', (TType.DOUBLE, None, False), None, ),  # 5
    (6, TType.LIST, 'cart_ft_cmd', (TType.DOUBLE, None, False), None, ),  # 6
    (7, TType.BOOL, 'status', None, None, ),  # 7
)
all_structs.append(PointOp)
PointOp.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'pos', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.STRUCT, 'op', [Op, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs
