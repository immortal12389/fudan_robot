#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from robot import RPCRobot
from robot.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i32 power_on(bool block)')
    print('  i32 power_off(bool block)')
    print('  i32 enable(bool block)')
    print('  i32 disable(bool block)')
    print('  i32 shutdown(bool block)')
    print('  i32 stop(bool block)')
    print('  i32 pause(bool block)')
    print('  i32 resume(bool block)')
    print('  i32 run_program(string name, bool block)')
    print('  i32 set_tool_data(string name,  tool_offset,  payload,  inertia_tensor)')
    print('   get_tool_load()')
    print('   get_tcp_offset()')
    print('  i32 set_wobj(string name,  wobj)')
    print('  i32 set_wobj_offset( wobj, bool active)')
    print('   get_wobj()')
    print('   cal_fkine( joints_position,  tool,  wobj)')
    print('   cal_ikine( p,  q_near,  tool,  wobj)')
    print('  i32 set_digital_output_mode(i16 num, i16 type, i32 freq, i32 duty_cycle)')
    print('  i32 set_standard_digital_out(i16 num, bool value, bool block)')
    print('  i32 set_tool_digital_out(i16 num, bool value, bool block)')
    print('  bool get_standard_digital_in(i16 num)')
    print('  bool get_standard_digital_out(i16 num)')
    print('  bool get_tool_digital_in(i16 num)')
    print('  bool get_tool_digital_out(i16 num)')
    print('  bool get_config_digital_in(i16 num)')
    print('  double get_standard_analog_voltage_in(i16 num)')
    print('  double get_tool_analog_voltage_in(i16 num)')
    print('  double get_standard_analog_current_in(i16 num)')
    print('  i32 set_standard_analog_voltage_out(i16 num, double value, bool block)')
    print('  i32 set_standard_analog_current_out(i16 num, double value, bool block)')
    print('   read_data_485()')
    print('   read_raw_data_485(i32 len)')
    print('   read_raw_data_485_ht( head,  tail)')
    print('   read_raw_data_485_h( head, i32 len)')
    print('  bool write_data_485( data)')
    print('  bool write_raw_data_485( data)')
    print('  bool write_raw_data_485_h( data,  head)')
    print('  bool write_raw_data_485_ht( data,  head,  tail)')
    print('   tool_read_data_485()')
    print('   tool_read_raw_data_485(i32 len)')
    print('   tool_read_raw_data_485_h( head, i32 len)')
    print('   tool_read_raw_data_485_ht( head,  tail)')
    print('  bool tool_write_data_485( data)')
    print('  bool tool_write_raw_data_485( data)')
    print('  bool tool_write_raw_data_485_h( data,  head)')
    print('  bool tool_write_raw_data_485_ht( data,  head,  tail)')
    print('   read_data_can()')
    print('   read_raw_data_can()')
    print('  bool write_data_can(i32 id,  data)')
    print('  bool write_raw_data_can(i32 id,  data)')
    print('  bool get_function_digital_in(i16 num)')
    print('  bool get_function_digital_out(i16 num)')
    print('  bool read_bool_reg(i16 num)')
    print('  i32 read_word_reg(i16 num)')
    print('  double read_float_reg(i16 num)')
    print('  i32 write_bool_reg(i16 num, bool value)')
    print('  i32 write_word_reg(i16 num, i32 value)')
    print('  i32 write_float_reg(i16 num, double value)')
    print('  bool get_function_reg_in(i16 num)')
    print('  bool get_function_reg_out(i16 num)')
    print('  i32 movej( joints_list, double v, double a, double r, bool block, Op op, bool def_acc)')
    print('  i32 movej_pose( p, double v, double a, double r,  q_near, string tool, string wobj, bool block, Op op, bool def_acc)')
    print('  i32 movej2( joints_list, double v, double a, double r, bool block, Op op, bool def_acc)')
    print('  i32 movej_pose2( p, double v, double a, double r,  q_near, string tool, string wobj, bool block, Op op, bool def_acc)')
    print('  i32 movel( p, double v, double a, double r,  q_near, string tool, string wobj, bool block, Op op, bool def_acc)')
    print('  i32 movec( p1,  p2, double v, double a, double r, i32 mode,  q_near, string tool, string wobj, bool block, Op op, bool def_acc)')
    print('  i32 move_circle( p1,  p2, double v, double a, double r, i32 mode,  q_near, string tool, string wobj, bool block, Op op, bool def_acc)')
    print('  i32 tcp_move( pose_offset, double v, double a, double r, string tool, bool block, Op op, bool def_acc)')
    print('  i32 tcp_move_2p( p1,  p2, double v, double a, double r, string tool, string wobj, bool block, Op op, bool def_acc)')
    print('  i32 wobj_move( pose_offset, double v, double a, double r, string wobj, bool block, Op op, bool def_acc)')
    print('  i32 wobj_move_2p( p1,  p2, double v, double a, double r, string tool, string wobj, bool block, Op op, bool def_acc)')
    print('  i32 spline( pose_list, double v, double a, string tool, string wobj, bool block, Op op, double r, bool def_acc)')
    print('  i32 spline_op( pose_list, double v, double a, string tool, string wobj, bool block, Op op, double r, bool def_acc)')
    print('  i32 speedj( joints_list, double a, i32 time, bool block)')
    print('  i32 speedl( pose_list, double a, i32 time, bool block)')
    print('  i32 speed_stop(bool block)')
    print('  i32 servoj( joints_list, double v, double a, bool block, double kp, double kd, double smooth_vel, double smooth_acc)')
    print('  i32 servoj_pose( pose_list, double v, double a,  q_near, string tool, string wobj, bool block, double kp, double kd, double smooth_vel, double smooth_acc)')
    print('  i32 servo_tcp( pose_offset, double v, double a, string tool, bool block, double kp, double kd, double smooth_vel, double smooth_acc)')
    print('  i32 servol( pose_list, double v, double a,  q_near, string tool, string wobj, bool block, double kp, double kd, double smooth_vel, double smooth_acc)')
    print('  i32 teach_mode(bool block)')
    print('  i32 end_teach_mode(bool block)')
    print('  i32 modbus_add_signal(string ip, i32 slave_number, i32 signal_address, i32 signal_type, string signal_name)')
    print('  i32 modbus_delete_signal(string signal_name)')
    print('  i32 modbus_read(string signal_name)')
    print('  i32 modbus_write(string signal_name, i32 value)')
    print('  void modbus_set_frequency(string signal_name, i32 frequence)')
    print('   get_last_error()')
    print('  i32 get_noneblock_taskstate(i32 id)')
    print('  void log_info(string message)')
    print('  void log_error(string message)')
    print('  i32 simulation(bool sim, bool block)')
    print('  i32 speed(double val)')
    print('   get_robot_state()')
    print('   get_flange_pose()')
    print('   get_flange_speed()')
    print('   get_flange_acceleration()')
    print('   get_tcp_pose()')
    print('   get_tcp_speed()')
    print('   get_tcp_acceleration()')
    print('   get_tcp_force()')
    print('   get_actual_joints_position()')
    print('   get_target_joints_position()')
    print('   get_actual_joints_speed()')
    print('   get_target_joints_speed()')
    print('   get_actual_joints_acceleration()')
    print('   get_target_joints_acceleration()')
    print('   get_actual_joints_torque()')
    print('   get_target_joints_torque()')
    print('  i32 stop_record_track()')
    print('  i32 start_record_track(string name, i32 mode, string tool, string wobj, double interval)')
    print('  i32 collision_detect(i32 value)')
    print('  i32 replay(string name, i32 value, i32 mode)')
    print('  i32 set_load_data( value)')
    print('  i32 fc_start()')
    print('  i32 fc_stop()')
    print('  i32 fc_config( direction,  ref_ft,  damp,  max_vel,  number_list, string tool, string wobj, i32 value)')
    print('  i32 fc_move(bool block)')
    print('  i32 fc_guard_act( direction,  ref_ft, string tool, string wobj, i32 type, i32 force_property)')
    print('  i32 fc_guard_deact()')
    print('  i32 fc_force_set_value( direction,  ref_ft)')
    print('  i32 fc_wait_pos( middle,  range, bool absolute, i32 duration, i32 timeout)')
    print('  i32 fc_wait_vel( middle,  range, bool absolute, i32 duration, i32 timeout)')
    print('  i32 fc_wait_ft( middle,  range, bool absolute, i32 duration, i32 timeout)')
    print('  i32 fc_wait_logic( value)')
    print('   fc_get_ft()')
    print('  bool fc_mode_is_active()')
    print('  i32 start_realtime_mode(i32 mode, double fileter_bandwidth, double com_lost_time)')
    print('  i32 end_realtime_mode()')
    print('  i32 realtime_data_enqueue( realtime_data, bool block)')
    print('  i32 clear_realtime_data_queue()')
    print('  i32 get_realtime_data_queue_size()')
    print('  i32 enable_speed_optimization()')
    print('  i32 disable_speed_optimization()')
    print('  void change_recipe()')
    print('  i32 set_system_value_bool(string name, bool value)')
    print('  i32 set_system_value_double(string name, double value)')
    print('  i32 set_system_value_str(string name, string value)')
    print('  i32 set_system_value_list(string name,  value)')
    print('  bool get_system_value_bool(string name)')
    print('  double get_system_value_double(string name)')
    print('  string get_system_value_str(string name)')
    print('   get_system_value_list(string name)')
    print('  i32 trackEnqueue( track, bool block)')
    print('  i32 trackEnqueueOp( track, bool block)')
    print('  i32 trackClearQueue()')
    print('  i32 getQueueSize()')
    print('  i32 trackJointMotion(double speed, double acc, bool block)')
    print('  i32 trackCartMotion(double speed, double acc, bool block, string tool, string wobj, double radius)')
    print('  void rpc_heartbeat(i32 time)')
    print('  i32 move_spiral( p1,  p2, double rev, double len, double r, i32 mode, double v, double a,  q_near, string tool, string wobj, bool block, Op op, bool def_acc)')
    print('  i32 enable_acc_optimization()')
    print('  i32 disable_acc_optimization()')
    print('  i32 set_baudrate_485(i32 value, bool block)')
    print('  i32 set_baudrate_can(i32 value, bool block)')
    print('  i32 set_analog_output_mode(i16 num, i32 mode, bool block)')
    print('  bool robotmoving()')
    print('  i32 modbus_write_multiple_coils(i32 slave_num, string name, i32 len,  byte_list)')
    print('  i32 modbus_write_multiple_regs(i32 slave_num, string name, i32 len,  word_list)')
    print('  string get_current_project()')
    print('   get_files_list(string path)')
    print('  RobotStatus getRobotStatus()')
    print('  IOStatus getRobotIOStatus()')
    print('   get_tcp_pose_coord(string tool, string wobj)')
    print('   get_tcp_force_tool(string tool)')
    print('  i32 restart(bool block)')
    print('  i32 set_servo_config(i32 axis_num, i32 id, i32 value, i32 qfmt, bool block)')
    print('  i32 apply_servo_config(i32 axis_num, bool block)')
    print('   get_motor_pole_pair_number()')
    print('   get_motor_stator_slots()')
    print('   get_axis_ratio()')
    print('  i32 collision_detection_reset()')
    print('  i32 set_servo_file_params(i32 axis_num, i32 id, string name, double value, double qfmt)')
    print('  i32 combine_motion_config(i32 type, i32 ref_plane, double fq, double amp, double el_offset, double az_offset, double up_height,  time, bool path_dwell,  op_list)')
    print('  i32 set_eaxis_param(i32 num, EAxisParam param, bool block)')
    print('  i32 add_eaxis_scheme(i32 num, bool block)')
    print('  i32 delete_eaxis_scheme(i32 num, bool block)')
    print('  i32 enable_eaxis_scheme(string scheme_name)')
    print('  i32 disable_eaxis_scheme(string scheme_name)')
    print('  i32 set_eaxiss_scheme_param(i32 num, EAxisSchemeParam param, bool block)')
    print('  i32 move_jog(MoveJogTaskParam param, bool block)')
    print('  i32 stop_manual_move(bool block)')
    print('  string get_robot_version()')
    print('  i32 set_teach_pendant(bool enable)')
    print('  i32 get_teach_speed()')
    print('  i32 get_global_speed()')
    print('  i32 set_teach_speed(i32 v)')
    print('  i32 enable_combine_motion()')
    print('  i32 disable_combine_motion()')
    print('  i32 enable_singularity_control()')
    print('  i32 disable_singularity_control()')
    print('  i32 enable_vibration_control()')
    print('  i32 disable_vibration_control()')
    print('  i32 move_eaxis(string scheme_name,  epose, double v, bool block, Op op)')
    print('  i32 movej2_eaxis( joints_list, double v, double a, double rad, string scheme_name,  epose, double eaxis_v, bool block, Op op, bool def_acc)')
    print('  i32 movej2_pose_eaxis( p, double v, double a, double rad,  qnear, string tool, string wobj, string scheme_name,  epose, double eaxis_v, bool block, Op op, bool def_acc)')
    print('  i32 movel_eaxis( p, double v, double a, double rad,  qnear, string tool, string wobj, string scheme_name,  epose, double eaxis_v, bool block, Op op, bool def_acc)')
    print('  i32 movec_eaxis( p1,  p2, double v, double a, double rad,  qnear, string tool, string wobj, string scheme_name,  epose, double eaxis_v, bool block, Op op, bool def_acc, i32 mode)')
    print('  i32 move_circle_eaxis( p1,  p2, double v, double a, double rad, i32 mode,  qnear, string tool, string wobj, string scheme_name,  epose, double eaxis_v, bool block, Op op, bool def_acc)')
    print('  ReachabilityParam reach_check( base,  wobj,  tool,  ref_pos,  check_points)')
    print('  i32 move_jog_eaxis(string name, i32 direction, double vel, bool block)')
    print('   get_eaxis_info()')
    print('  i32 set_hand_teach_parameter(i32 space,  joint_scale,  cart_scale, i32 coord_type,  direction)')
    print('  i32 set_pendant_type(i32 type)')
    print('  i32 set_blend_ahead(i32 per, i32 num)')
    print('  i32 switch_mode(i32 mode)')
    print('  i64 read_encoder_count()')
    print('  i32 set_kinematic_calibration_params( params)')
    print('   get_pos_bias()')
    print('   get_system_value_lists(string name)')
    print('   get_origin_DH()')
    print('   get_calib_DH()')
    print('   get_robot_type()')
    print('   get_ext_torque()')
    print('  i32 set_dynamic_calibration_params( params)')
    print('   get_dynamic_calibration_params()')
    print('  i32 upload_robot_param_to_toolboard(string passwd)')
    print('  i32 set_kinematic_calibration_info(string passwd, string info)')
    print('  i32 set_dynamic_calibration_info(string passwd, string info)')
    print('  i32 set_vibration_calibration_info(string passwd, string info)')
    print('   get_axis_motor_rated_current()')
    print('   get_axis_motor_kt()')
    print('  i32 abort(bool block)')
    print('   get_vibration_calibration_params()')
    print('  i32 save_kinematic_calibration_params(string passwd)')
    print('  i32 save_dynamic_calibration_params(string passwd)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = RPCRobot.Client(protocol)
transport.open()

if cmd == 'power_on':
    if len(args) != 1:
        print('power_on requires 1 args')
        sys.exit(1)
    pp.pprint(client.power_on(eval(args[0]),))

elif cmd == 'power_off':
    if len(args) != 1:
        print('power_off requires 1 args')
        sys.exit(1)
    pp.pprint(client.power_off(eval(args[0]),))

elif cmd == 'enable':
    if len(args) != 1:
        print('enable requires 1 args')
        sys.exit(1)
    pp.pprint(client.enable(eval(args[0]),))

elif cmd == 'disable':
    if len(args) != 1:
        print('disable requires 1 args')
        sys.exit(1)
    pp.pprint(client.disable(eval(args[0]),))

elif cmd == 'shutdown':
    if len(args) != 1:
        print('shutdown requires 1 args')
        sys.exit(1)
    pp.pprint(client.shutdown(eval(args[0]),))

elif cmd == 'stop':
    if len(args) != 1:
        print('stop requires 1 args')
        sys.exit(1)
    pp.pprint(client.stop(eval(args[0]),))

elif cmd == 'pause':
    if len(args) != 1:
        print('pause requires 1 args')
        sys.exit(1)
    pp.pprint(client.pause(eval(args[0]),))

elif cmd == 'resume':
    if len(args) != 1:
        print('resume requires 1 args')
        sys.exit(1)
    pp.pprint(client.resume(eval(args[0]),))

elif cmd == 'run_program':
    if len(args) != 2:
        print('run_program requires 2 args')
        sys.exit(1)
    pp.pprint(client.run_program(args[0], eval(args[1]),))

elif cmd == 'set_tool_data':
    if len(args) != 4:
        print('set_tool_data requires 4 args')
        sys.exit(1)
    pp.pprint(client.set_tool_data(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'get_tool_load':
    if len(args) != 0:
        print('get_tool_load requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_tool_load())

elif cmd == 'get_tcp_offset':
    if len(args) != 0:
        print('get_tcp_offset requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_tcp_offset())

elif cmd == 'set_wobj':
    if len(args) != 2:
        print('set_wobj requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_wobj(args[0], eval(args[1]),))

elif cmd == 'set_wobj_offset':
    if len(args) != 2:
        print('set_wobj_offset requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_wobj_offset(eval(args[0]), eval(args[1]),))

elif cmd == 'get_wobj':
    if len(args) != 0:
        print('get_wobj requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_wobj())

elif cmd == 'cal_fkine':
    if len(args) != 3:
        print('cal_fkine requires 3 args')
        sys.exit(1)
    pp.pprint(client.cal_fkine(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'cal_ikine':
    if len(args) != 4:
        print('cal_ikine requires 4 args')
        sys.exit(1)
    pp.pprint(client.cal_ikine(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'set_digital_output_mode':
    if len(args) != 4:
        print('set_digital_output_mode requires 4 args')
        sys.exit(1)
    pp.pprint(client.set_digital_output_mode(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'set_standard_digital_out':
    if len(args) != 3:
        print('set_standard_digital_out requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_standard_digital_out(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'set_tool_digital_out':
    if len(args) != 3:
        print('set_tool_digital_out requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_tool_digital_out(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'get_standard_digital_in':
    if len(args) != 1:
        print('get_standard_digital_in requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_standard_digital_in(eval(args[0]),))

elif cmd == 'get_standard_digital_out':
    if len(args) != 1:
        print('get_standard_digital_out requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_standard_digital_out(eval(args[0]),))

elif cmd == 'get_tool_digital_in':
    if len(args) != 1:
        print('get_tool_digital_in requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_tool_digital_in(eval(args[0]),))

elif cmd == 'get_tool_digital_out':
    if len(args) != 1:
        print('get_tool_digital_out requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_tool_digital_out(eval(args[0]),))

elif cmd == 'get_config_digital_in':
    if len(args) != 1:
        print('get_config_digital_in requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_config_digital_in(eval(args[0]),))

elif cmd == 'get_standard_analog_voltage_in':
    if len(args) != 1:
        print('get_standard_analog_voltage_in requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_standard_analog_voltage_in(eval(args[0]),))

elif cmd == 'get_tool_analog_voltage_in':
    if len(args) != 1:
        print('get_tool_analog_voltage_in requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_tool_analog_voltage_in(eval(args[0]),))

elif cmd == 'get_standard_analog_current_in':
    if len(args) != 1:
        print('get_standard_analog_current_in requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_standard_analog_current_in(eval(args[0]),))

elif cmd == 'set_standard_analog_voltage_out':
    if len(args) != 3:
        print('set_standard_analog_voltage_out requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_standard_analog_voltage_out(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'set_standard_analog_current_out':
    if len(args) != 3:
        print('set_standard_analog_current_out requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_standard_analog_current_out(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'read_data_485':
    if len(args) != 0:
        print('read_data_485 requires 0 args')
        sys.exit(1)
    pp.pprint(client.read_data_485())

elif cmd == 'read_raw_data_485':
    if len(args) != 1:
        print('read_raw_data_485 requires 1 args')
        sys.exit(1)
    pp.pprint(client.read_raw_data_485(eval(args[0]),))

elif cmd == 'read_raw_data_485_ht':
    if len(args) != 2:
        print('read_raw_data_485_ht requires 2 args')
        sys.exit(1)
    pp.pprint(client.read_raw_data_485_ht(eval(args[0]), eval(args[1]),))

elif cmd == 'read_raw_data_485_h':
    if len(args) != 2:
        print('read_raw_data_485_h requires 2 args')
        sys.exit(1)
    pp.pprint(client.read_raw_data_485_h(eval(args[0]), eval(args[1]),))

elif cmd == 'write_data_485':
    if len(args) != 1:
        print('write_data_485 requires 1 args')
        sys.exit(1)
    pp.pprint(client.write_data_485(eval(args[0]),))

elif cmd == 'write_raw_data_485':
    if len(args) != 1:
        print('write_raw_data_485 requires 1 args')
        sys.exit(1)
    pp.pprint(client.write_raw_data_485(eval(args[0]),))

elif cmd == 'write_raw_data_485_h':
    if len(args) != 2:
        print('write_raw_data_485_h requires 2 args')
        sys.exit(1)
    pp.pprint(client.write_raw_data_485_h(eval(args[0]), eval(args[1]),))

elif cmd == 'write_raw_data_485_ht':
    if len(args) != 3:
        print('write_raw_data_485_ht requires 3 args')
        sys.exit(1)
    pp.pprint(client.write_raw_data_485_ht(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tool_read_data_485':
    if len(args) != 0:
        print('tool_read_data_485 requires 0 args')
        sys.exit(1)
    pp.pprint(client.tool_read_data_485())

elif cmd == 'tool_read_raw_data_485':
    if len(args) != 1:
        print('tool_read_raw_data_485 requires 1 args')
        sys.exit(1)
    pp.pprint(client.tool_read_raw_data_485(eval(args[0]),))

elif cmd == 'tool_read_raw_data_485_h':
    if len(args) != 2:
        print('tool_read_raw_data_485_h requires 2 args')
        sys.exit(1)
    pp.pprint(client.tool_read_raw_data_485_h(eval(args[0]), eval(args[1]),))

elif cmd == 'tool_read_raw_data_485_ht':
    if len(args) != 2:
        print('tool_read_raw_data_485_ht requires 2 args')
        sys.exit(1)
    pp.pprint(client.tool_read_raw_data_485_ht(eval(args[0]), eval(args[1]),))

elif cmd == 'tool_write_data_485':
    if len(args) != 1:
        print('tool_write_data_485 requires 1 args')
        sys.exit(1)
    pp.pprint(client.tool_write_data_485(eval(args[0]),))

elif cmd == 'tool_write_raw_data_485':
    if len(args) != 1:
        print('tool_write_raw_data_485 requires 1 args')
        sys.exit(1)
    pp.pprint(client.tool_write_raw_data_485(eval(args[0]),))

elif cmd == 'tool_write_raw_data_485_h':
    if len(args) != 2:
        print('tool_write_raw_data_485_h requires 2 args')
        sys.exit(1)
    pp.pprint(client.tool_write_raw_data_485_h(eval(args[0]), eval(args[1]),))

elif cmd == 'tool_write_raw_data_485_ht':
    if len(args) != 3:
        print('tool_write_raw_data_485_ht requires 3 args')
        sys.exit(1)
    pp.pprint(client.tool_write_raw_data_485_ht(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'read_data_can':
    if len(args) != 0:
        print('read_data_can requires 0 args')
        sys.exit(1)
    pp.pprint(client.read_data_can())

elif cmd == 'read_raw_data_can':
    if len(args) != 0:
        print('read_raw_data_can requires 0 args')
        sys.exit(1)
    pp.pprint(client.read_raw_data_can())

elif cmd == 'write_data_can':
    if len(args) != 2:
        print('write_data_can requires 2 args')
        sys.exit(1)
    pp.pprint(client.write_data_can(eval(args[0]), eval(args[1]),))

elif cmd == 'write_raw_data_can':
    if len(args) != 2:
        print('write_raw_data_can requires 2 args')
        sys.exit(1)
    pp.pprint(client.write_raw_data_can(eval(args[0]), eval(args[1]),))

elif cmd == 'get_function_digital_in':
    if len(args) != 1:
        print('get_function_digital_in requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_function_digital_in(eval(args[0]),))

elif cmd == 'get_function_digital_out':
    if len(args) != 1:
        print('get_function_digital_out requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_function_digital_out(eval(args[0]),))

elif cmd == 'read_bool_reg':
    if len(args) != 1:
        print('read_bool_reg requires 1 args')
        sys.exit(1)
    pp.pprint(client.read_bool_reg(eval(args[0]),))

elif cmd == 'read_word_reg':
    if len(args) != 1:
        print('read_word_reg requires 1 args')
        sys.exit(1)
    pp.pprint(client.read_word_reg(eval(args[0]),))

elif cmd == 'read_float_reg':
    if len(args) != 1:
        print('read_float_reg requires 1 args')
        sys.exit(1)
    pp.pprint(client.read_float_reg(eval(args[0]),))

elif cmd == 'write_bool_reg':
    if len(args) != 2:
        print('write_bool_reg requires 2 args')
        sys.exit(1)
    pp.pprint(client.write_bool_reg(eval(args[0]), eval(args[1]),))

elif cmd == 'write_word_reg':
    if len(args) != 2:
        print('write_word_reg requires 2 args')
        sys.exit(1)
    pp.pprint(client.write_word_reg(eval(args[0]), eval(args[1]),))

elif cmd == 'write_float_reg':
    if len(args) != 2:
        print('write_float_reg requires 2 args')
        sys.exit(1)
    pp.pprint(client.write_float_reg(eval(args[0]), eval(args[1]),))

elif cmd == 'get_function_reg_in':
    if len(args) != 1:
        print('get_function_reg_in requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_function_reg_in(eval(args[0]),))

elif cmd == 'get_function_reg_out':
    if len(args) != 1:
        print('get_function_reg_out requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_function_reg_out(eval(args[0]),))

elif cmd == 'movej':
    if len(args) != 7:
        print('movej requires 7 args')
        sys.exit(1)
    pp.pprint(client.movej(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'movej_pose':
    if len(args) != 10:
        print('movej_pose requires 10 args')
        sys.exit(1)
    pp.pprint(client.movej_pose(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5], args[6], eval(args[7]), eval(args[8]), eval(args[9]),))

elif cmd == 'movej2':
    if len(args) != 7:
        print('movej2 requires 7 args')
        sys.exit(1)
    pp.pprint(client.movej2(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'movej_pose2':
    if len(args) != 10:
        print('movej_pose2 requires 10 args')
        sys.exit(1)
    pp.pprint(client.movej_pose2(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5], args[6], eval(args[7]), eval(args[8]), eval(args[9]),))

elif cmd == 'movel':
    if len(args) != 10:
        print('movel requires 10 args')
        sys.exit(1)
    pp.pprint(client.movel(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5], args[6], eval(args[7]), eval(args[8]), eval(args[9]),))

elif cmd == 'movec':
    if len(args) != 12:
        print('movec requires 12 args')
        sys.exit(1)
    pp.pprint(client.movec(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), args[7], args[8], eval(args[9]), eval(args[10]), eval(args[11]),))

elif cmd == 'move_circle':
    if len(args) != 12:
        print('move_circle requires 12 args')
        sys.exit(1)
    pp.pprint(client.move_circle(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), args[7], args[8], eval(args[9]), eval(args[10]), eval(args[11]),))

elif cmd == 'tcp_move':
    if len(args) != 8:
        print('tcp_move requires 8 args')
        sys.exit(1)
    pp.pprint(client.tcp_move(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4], eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'tcp_move_2p':
    if len(args) != 10:
        print('tcp_move_2p requires 10 args')
        sys.exit(1)
    pp.pprint(client.tcp_move_2p(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5], args[6], eval(args[7]), eval(args[8]), eval(args[9]),))

elif cmd == 'wobj_move':
    if len(args) != 8:
        print('wobj_move requires 8 args')
        sys.exit(1)
    pp.pprint(client.wobj_move(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4], eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'wobj_move_2p':
    if len(args) != 10:
        print('wobj_move_2p requires 10 args')
        sys.exit(1)
    pp.pprint(client.wobj_move_2p(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5], args[6], eval(args[7]), eval(args[8]), eval(args[9]),))

elif cmd == 'spline':
    if len(args) != 9:
        print('spline requires 9 args')
        sys.exit(1)
    pp.pprint(client.spline(eval(args[0]), eval(args[1]), eval(args[2]), args[3], args[4], eval(args[5]), eval(args[6]), eval(args[7]), eval(args[8]),))

elif cmd == 'spline_op':
    if len(args) != 9:
        print('spline_op requires 9 args')
        sys.exit(1)
    pp.pprint(client.spline_op(eval(args[0]), eval(args[1]), eval(args[2]), args[3], args[4], eval(args[5]), eval(args[6]), eval(args[7]), eval(args[8]),))

elif cmd == 'speedj':
    if len(args) != 4:
        print('speedj requires 4 args')
        sys.exit(1)
    pp.pprint(client.speedj(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'speedl':
    if len(args) != 4:
        print('speedl requires 4 args')
        sys.exit(1)
    pp.pprint(client.speedl(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'speed_stop':
    if len(args) != 1:
        print('speed_stop requires 1 args')
        sys.exit(1)
    pp.pprint(client.speed_stop(eval(args[0]),))

elif cmd == 'servoj':
    if len(args) != 8:
        print('servoj requires 8 args')
        sys.exit(1)
    pp.pprint(client.servoj(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'servoj_pose':
    if len(args) != 11:
        print('servoj_pose requires 11 args')
        sys.exit(1)
    pp.pprint(client.servoj_pose(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4], args[5], eval(args[6]), eval(args[7]), eval(args[8]), eval(args[9]), eval(args[10]),))

elif cmd == 'servo_tcp':
    if len(args) != 9:
        print('servo_tcp requires 9 args')
        sys.exit(1)
    pp.pprint(client.servo_tcp(eval(args[0]), eval(args[1]), eval(args[2]), args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]), eval(args[8]),))

elif cmd == 'servol':
    if len(args) != 11:
        print('servol requires 11 args')
        sys.exit(1)
    pp.pprint(client.servol(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4], args[5], eval(args[6]), eval(args[7]), eval(args[8]), eval(args[9]), eval(args[10]),))

elif cmd == 'teach_mode':
    if len(args) != 1:
        print('teach_mode requires 1 args')
        sys.exit(1)
    pp.pprint(client.teach_mode(eval(args[0]),))

elif cmd == 'end_teach_mode':
    if len(args) != 1:
        print('end_teach_mode requires 1 args')
        sys.exit(1)
    pp.pprint(client.end_teach_mode(eval(args[0]),))

elif cmd == 'modbus_add_signal':
    if len(args) != 5:
        print('modbus_add_signal requires 5 args')
        sys.exit(1)
    pp.pprint(client.modbus_add_signal(args[0], eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'modbus_delete_signal':
    if len(args) != 1:
        print('modbus_delete_signal requires 1 args')
        sys.exit(1)
    pp.pprint(client.modbus_delete_signal(args[0],))

elif cmd == 'modbus_read':
    if len(args) != 1:
        print('modbus_read requires 1 args')
        sys.exit(1)
    pp.pprint(client.modbus_read(args[0],))

elif cmd == 'modbus_write':
    if len(args) != 2:
        print('modbus_write requires 2 args')
        sys.exit(1)
    pp.pprint(client.modbus_write(args[0], eval(args[1]),))

elif cmd == 'modbus_set_frequency':
    if len(args) != 2:
        print('modbus_set_frequency requires 2 args')
        sys.exit(1)
    pp.pprint(client.modbus_set_frequency(args[0], eval(args[1]),))

elif cmd == 'get_last_error':
    if len(args) != 0:
        print('get_last_error requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_last_error())

elif cmd == 'get_noneblock_taskstate':
    if len(args) != 1:
        print('get_noneblock_taskstate requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_noneblock_taskstate(eval(args[0]),))

elif cmd == 'log_info':
    if len(args) != 1:
        print('log_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.log_info(args[0],))

elif cmd == 'log_error':
    if len(args) != 1:
        print('log_error requires 1 args')
        sys.exit(1)
    pp.pprint(client.log_error(args[0],))

elif cmd == 'simulation':
    if len(args) != 2:
        print('simulation requires 2 args')
        sys.exit(1)
    pp.pprint(client.simulation(eval(args[0]), eval(args[1]),))

elif cmd == 'speed':
    if len(args) != 1:
        print('speed requires 1 args')
        sys.exit(1)
    pp.pprint(client.speed(eval(args[0]),))

elif cmd == 'get_robot_state':
    if len(args) != 0:
        print('get_robot_state requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_robot_state())

elif cmd == 'get_flange_pose':
    if len(args) != 0:
        print('get_flange_pose requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_flange_pose())

elif cmd == 'get_flange_speed':
    if len(args) != 0:
        print('get_flange_speed requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_flange_speed())

elif cmd == 'get_flange_acceleration':
    if len(args) != 0:
        print('get_flange_acceleration requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_flange_acceleration())

elif cmd == 'get_tcp_pose':
    if len(args) != 0:
        print('get_tcp_pose requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_tcp_pose())

elif cmd == 'get_tcp_speed':
    if len(args) != 0:
        print('get_tcp_speed requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_tcp_speed())

elif cmd == 'get_tcp_acceleration':
    if len(args) != 0:
        print('get_tcp_acceleration requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_tcp_acceleration())

elif cmd == 'get_tcp_force':
    if len(args) != 0:
        print('get_tcp_force requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_tcp_force())

elif cmd == 'get_actual_joints_position':
    if len(args) != 0:
        print('get_actual_joints_position requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_actual_joints_position())

elif cmd == 'get_target_joints_position':
    if len(args) != 0:
        print('get_target_joints_position requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_target_joints_position())

elif cmd == 'get_actual_joints_speed':
    if len(args) != 0:
        print('get_actual_joints_speed requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_actual_joints_speed())

elif cmd == 'get_target_joints_speed':
    if len(args) != 0:
        print('get_target_joints_speed requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_target_joints_speed())

elif cmd == 'get_actual_joints_acceleration':
    if len(args) != 0:
        print('get_actual_joints_acceleration requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_actual_joints_acceleration())

elif cmd == 'get_target_joints_acceleration':
    if len(args) != 0:
        print('get_target_joints_acceleration requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_target_joints_acceleration())

elif cmd == 'get_actual_joints_torque':
    if len(args) != 0:
        print('get_actual_joints_torque requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_actual_joints_torque())

elif cmd == 'get_target_joints_torque':
    if len(args) != 0:
        print('get_target_joints_torque requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_target_joints_torque())

elif cmd == 'stop_record_track':
    if len(args) != 0:
        print('stop_record_track requires 0 args')
        sys.exit(1)
    pp.pprint(client.stop_record_track())

elif cmd == 'start_record_track':
    if len(args) != 5:
        print('start_record_track requires 5 args')
        sys.exit(1)
    pp.pprint(client.start_record_track(args[0], eval(args[1]), args[2], args[3], eval(args[4]),))

elif cmd == 'collision_detect':
    if len(args) != 1:
        print('collision_detect requires 1 args')
        sys.exit(1)
    pp.pprint(client.collision_detect(eval(args[0]),))

elif cmd == 'replay':
    if len(args) != 3:
        print('replay requires 3 args')
        sys.exit(1)
    pp.pprint(client.replay(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'set_load_data':
    if len(args) != 1:
        print('set_load_data requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_load_data(eval(args[0]),))

elif cmd == 'fc_start':
    if len(args) != 0:
        print('fc_start requires 0 args')
        sys.exit(1)
    pp.pprint(client.fc_start())

elif cmd == 'fc_stop':
    if len(args) != 0:
        print('fc_stop requires 0 args')
        sys.exit(1)
    pp.pprint(client.fc_stop())

elif cmd == 'fc_config':
    if len(args) != 8:
        print('fc_config requires 8 args')
        sys.exit(1)
    pp.pprint(client.fc_config(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5], args[6], eval(args[7]),))

elif cmd == 'fc_move':
    if len(args) != 1:
        print('fc_move requires 1 args')
        sys.exit(1)
    pp.pprint(client.fc_move(eval(args[0]),))

elif cmd == 'fc_guard_act':
    if len(args) != 6:
        print('fc_guard_act requires 6 args')
        sys.exit(1)
    pp.pprint(client.fc_guard_act(eval(args[0]), eval(args[1]), args[2], args[3], eval(args[4]), eval(args[5]),))

elif cmd == 'fc_guard_deact':
    if len(args) != 0:
        print('fc_guard_deact requires 0 args')
        sys.exit(1)
    pp.pprint(client.fc_guard_deact())

elif cmd == 'fc_force_set_value':
    if len(args) != 2:
        print('fc_force_set_value requires 2 args')
        sys.exit(1)
    pp.pprint(client.fc_force_set_value(eval(args[0]), eval(args[1]),))

elif cmd == 'fc_wait_pos':
    if len(args) != 5:
        print('fc_wait_pos requires 5 args')
        sys.exit(1)
    pp.pprint(client.fc_wait_pos(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'fc_wait_vel':
    if len(args) != 5:
        print('fc_wait_vel requires 5 args')
        sys.exit(1)
    pp.pprint(client.fc_wait_vel(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'fc_wait_ft':
    if len(args) != 5:
        print('fc_wait_ft requires 5 args')
        sys.exit(1)
    pp.pprint(client.fc_wait_ft(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'fc_wait_logic':
    if len(args) != 1:
        print('fc_wait_logic requires 1 args')
        sys.exit(1)
    pp.pprint(client.fc_wait_logic(eval(args[0]),))

elif cmd == 'fc_get_ft':
    if len(args) != 0:
        print('fc_get_ft requires 0 args')
        sys.exit(1)
    pp.pprint(client.fc_get_ft())

elif cmd == 'fc_mode_is_active':
    if len(args) != 0:
        print('fc_mode_is_active requires 0 args')
        sys.exit(1)
    pp.pprint(client.fc_mode_is_active())

elif cmd == 'start_realtime_mode':
    if len(args) != 3:
        print('start_realtime_mode requires 3 args')
        sys.exit(1)
    pp.pprint(client.start_realtime_mode(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'end_realtime_mode':
    if len(args) != 0:
        print('end_realtime_mode requires 0 args')
        sys.exit(1)
    pp.pprint(client.end_realtime_mode())

elif cmd == 'realtime_data_enqueue':
    if len(args) != 2:
        print('realtime_data_enqueue requires 2 args')
        sys.exit(1)
    pp.pprint(client.realtime_data_enqueue(eval(args[0]), eval(args[1]),))

elif cmd == 'clear_realtime_data_queue':
    if len(args) != 0:
        print('clear_realtime_data_queue requires 0 args')
        sys.exit(1)
    pp.pprint(client.clear_realtime_data_queue())

elif cmd == 'get_realtime_data_queue_size':
    if len(args) != 0:
        print('get_realtime_data_queue_size requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_realtime_data_queue_size())

elif cmd == 'enable_speed_optimization':
    if len(args) != 0:
        print('enable_speed_optimization requires 0 args')
        sys.exit(1)
    pp.pprint(client.enable_speed_optimization())

elif cmd == 'disable_speed_optimization':
    if len(args) != 0:
        print('disable_speed_optimization requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_speed_optimization())

elif cmd == 'change_recipe':
    if len(args) != 0:
        print('change_recipe requires 0 args')
        sys.exit(1)
    pp.pprint(client.change_recipe())

elif cmd == 'set_system_value_bool':
    if len(args) != 2:
        print('set_system_value_bool requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_system_value_bool(args[0], eval(args[1]),))

elif cmd == 'set_system_value_double':
    if len(args) != 2:
        print('set_system_value_double requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_system_value_double(args[0], eval(args[1]),))

elif cmd == 'set_system_value_str':
    if len(args) != 2:
        print('set_system_value_str requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_system_value_str(args[0], args[1],))

elif cmd == 'set_system_value_list':
    if len(args) != 2:
        print('set_system_value_list requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_system_value_list(args[0], eval(args[1]),))

elif cmd == 'get_system_value_bool':
    if len(args) != 1:
        print('get_system_value_bool requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_system_value_bool(args[0],))

elif cmd == 'get_system_value_double':
    if len(args) != 1:
        print('get_system_value_double requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_system_value_double(args[0],))

elif cmd == 'get_system_value_str':
    if len(args) != 1:
        print('get_system_value_str requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_system_value_str(args[0],))

elif cmd == 'get_system_value_list':
    if len(args) != 1:
        print('get_system_value_list requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_system_value_list(args[0],))

elif cmd == 'trackEnqueue':
    if len(args) != 2:
        print('trackEnqueue requires 2 args')
        sys.exit(1)
    pp.pprint(client.trackEnqueue(eval(args[0]), eval(args[1]),))

elif cmd == 'trackEnqueueOp':
    if len(args) != 2:
        print('trackEnqueueOp requires 2 args')
        sys.exit(1)
    pp.pprint(client.trackEnqueueOp(eval(args[0]), eval(args[1]),))

elif cmd == 'trackClearQueue':
    if len(args) != 0:
        print('trackClearQueue requires 0 args')
        sys.exit(1)
    pp.pprint(client.trackClearQueue())

elif cmd == 'getQueueSize':
    if len(args) != 0:
        print('getQueueSize requires 0 args')
        sys.exit(1)
    pp.pprint(client.getQueueSize())

elif cmd == 'trackJointMotion':
    if len(args) != 3:
        print('trackJointMotion requires 3 args')
        sys.exit(1)
    pp.pprint(client.trackJointMotion(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'trackCartMotion':
    if len(args) != 6:
        print('trackCartMotion requires 6 args')
        sys.exit(1)
    pp.pprint(client.trackCartMotion(eval(args[0]), eval(args[1]), eval(args[2]), args[3], args[4], eval(args[5]),))

elif cmd == 'rpc_heartbeat':
    if len(args) != 1:
        print('rpc_heartbeat requires 1 args')
        sys.exit(1)
    pp.pprint(client.rpc_heartbeat(eval(args[0]),))

elif cmd == 'move_spiral':
    if len(args) != 14:
        print('move_spiral requires 14 args')
        sys.exit(1)
    pp.pprint(client.move_spiral(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]), eval(args[8]), args[9], args[10], eval(args[11]), eval(args[12]), eval(args[13]),))

elif cmd == 'enable_acc_optimization':
    if len(args) != 0:
        print('enable_acc_optimization requires 0 args')
        sys.exit(1)
    pp.pprint(client.enable_acc_optimization())

elif cmd == 'disable_acc_optimization':
    if len(args) != 0:
        print('disable_acc_optimization requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_acc_optimization())

elif cmd == 'set_baudrate_485':
    if len(args) != 2:
        print('set_baudrate_485 requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_baudrate_485(eval(args[0]), eval(args[1]),))

elif cmd == 'set_baudrate_can':
    if len(args) != 2:
        print('set_baudrate_can requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_baudrate_can(eval(args[0]), eval(args[1]),))

elif cmd == 'set_analog_output_mode':
    if len(args) != 3:
        print('set_analog_output_mode requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_analog_output_mode(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'robotmoving':
    if len(args) != 0:
        print('robotmoving requires 0 args')
        sys.exit(1)
    pp.pprint(client.robotmoving())

elif cmd == 'modbus_write_multiple_coils':
    if len(args) != 4:
        print('modbus_write_multiple_coils requires 4 args')
        sys.exit(1)
    pp.pprint(client.modbus_write_multiple_coils(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'modbus_write_multiple_regs':
    if len(args) != 4:
        print('modbus_write_multiple_regs requires 4 args')
        sys.exit(1)
    pp.pprint(client.modbus_write_multiple_regs(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'get_current_project':
    if len(args) != 0:
        print('get_current_project requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_current_project())

elif cmd == 'get_files_list':
    if len(args) != 1:
        print('get_files_list requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_files_list(args[0],))

elif cmd == 'getRobotStatus':
    if len(args) != 0:
        print('getRobotStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.getRobotStatus())

elif cmd == 'getRobotIOStatus':
    if len(args) != 0:
        print('getRobotIOStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.getRobotIOStatus())

elif cmd == 'get_tcp_pose_coord':
    if len(args) != 2:
        print('get_tcp_pose_coord requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_tcp_pose_coord(args[0], args[1],))

elif cmd == 'get_tcp_force_tool':
    if len(args) != 1:
        print('get_tcp_force_tool requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_tcp_force_tool(args[0],))

elif cmd == 'restart':
    if len(args) != 1:
        print('restart requires 1 args')
        sys.exit(1)
    pp.pprint(client.restart(eval(args[0]),))

elif cmd == 'set_servo_config':
    if len(args) != 5:
        print('set_servo_config requires 5 args')
        sys.exit(1)
    pp.pprint(client.set_servo_config(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'apply_servo_config':
    if len(args) != 2:
        print('apply_servo_config requires 2 args')
        sys.exit(1)
    pp.pprint(client.apply_servo_config(eval(args[0]), eval(args[1]),))

elif cmd == 'get_motor_pole_pair_number':
    if len(args) != 0:
        print('get_motor_pole_pair_number requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_motor_pole_pair_number())

elif cmd == 'get_motor_stator_slots':
    if len(args) != 0:
        print('get_motor_stator_slots requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_motor_stator_slots())

elif cmd == 'get_axis_ratio':
    if len(args) != 0:
        print('get_axis_ratio requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_axis_ratio())

elif cmd == 'collision_detection_reset':
    if len(args) != 0:
        print('collision_detection_reset requires 0 args')
        sys.exit(1)
    pp.pprint(client.collision_detection_reset())

elif cmd == 'set_servo_file_params':
    if len(args) != 5:
        print('set_servo_file_params requires 5 args')
        sys.exit(1)
    pp.pprint(client.set_servo_file_params(eval(args[0]), eval(args[1]), args[2], eval(args[3]), eval(args[4]),))

elif cmd == 'combine_motion_config':
    if len(args) != 10:
        print('combine_motion_config requires 10 args')
        sys.exit(1)
    pp.pprint(client.combine_motion_config(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]), eval(args[8]), eval(args[9]),))

elif cmd == 'set_eaxis_param':
    if len(args) != 3:
        print('set_eaxis_param requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_eaxis_param(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'add_eaxis_scheme':
    if len(args) != 2:
        print('add_eaxis_scheme requires 2 args')
        sys.exit(1)
    pp.pprint(client.add_eaxis_scheme(eval(args[0]), eval(args[1]),))

elif cmd == 'delete_eaxis_scheme':
    if len(args) != 2:
        print('delete_eaxis_scheme requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_eaxis_scheme(eval(args[0]), eval(args[1]),))

elif cmd == 'enable_eaxis_scheme':
    if len(args) != 1:
        print('enable_eaxis_scheme requires 1 args')
        sys.exit(1)
    pp.pprint(client.enable_eaxis_scheme(args[0],))

elif cmd == 'disable_eaxis_scheme':
    if len(args) != 1:
        print('disable_eaxis_scheme requires 1 args')
        sys.exit(1)
    pp.pprint(client.disable_eaxis_scheme(args[0],))

elif cmd == 'set_eaxiss_scheme_param':
    if len(args) != 3:
        print('set_eaxiss_scheme_param requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_eaxiss_scheme_param(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'move_jog':
    if len(args) != 2:
        print('move_jog requires 2 args')
        sys.exit(1)
    pp.pprint(client.move_jog(eval(args[0]), eval(args[1]),))

elif cmd == 'stop_manual_move':
    if len(args) != 1:
        print('stop_manual_move requires 1 args')
        sys.exit(1)
    pp.pprint(client.stop_manual_move(eval(args[0]),))

elif cmd == 'get_robot_version':
    if len(args) != 0:
        print('get_robot_version requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_robot_version())

elif cmd == 'set_teach_pendant':
    if len(args) != 1:
        print('set_teach_pendant requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_teach_pendant(eval(args[0]),))

elif cmd == 'get_teach_speed':
    if len(args) != 0:
        print('get_teach_speed requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_teach_speed())

elif cmd == 'get_global_speed':
    if len(args) != 0:
        print('get_global_speed requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_global_speed())

elif cmd == 'set_teach_speed':
    if len(args) != 1:
        print('set_teach_speed requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_teach_speed(eval(args[0]),))

elif cmd == 'enable_combine_motion':
    if len(args) != 0:
        print('enable_combine_motion requires 0 args')
        sys.exit(1)
    pp.pprint(client.enable_combine_motion())

elif cmd == 'disable_combine_motion':
    if len(args) != 0:
        print('disable_combine_motion requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_combine_motion())

elif cmd == 'enable_singularity_control':
    if len(args) != 0:
        print('enable_singularity_control requires 0 args')
        sys.exit(1)
    pp.pprint(client.enable_singularity_control())

elif cmd == 'disable_singularity_control':
    if len(args) != 0:
        print('disable_singularity_control requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_singularity_control())

elif cmd == 'enable_vibration_control':
    if len(args) != 0:
        print('enable_vibration_control requires 0 args')
        sys.exit(1)
    pp.pprint(client.enable_vibration_control())

elif cmd == 'disable_vibration_control':
    if len(args) != 0:
        print('disable_vibration_control requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_vibration_control())

elif cmd == 'move_eaxis':
    if len(args) != 5:
        print('move_eaxis requires 5 args')
        sys.exit(1)
    pp.pprint(client.move_eaxis(args[0], eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'movej2_eaxis':
    if len(args) != 10:
        print('movej2_eaxis requires 10 args')
        sys.exit(1)
    pp.pprint(client.movej2_eaxis(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4], eval(args[5]), eval(args[6]), eval(args[7]), eval(args[8]), eval(args[9]),))

elif cmd == 'movej2_pose_eaxis':
    if len(args) != 13:
        print('movej2_pose_eaxis requires 13 args')
        sys.exit(1)
    pp.pprint(client.movej2_pose_eaxis(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5], args[6], args[7], eval(args[8]), eval(args[9]), eval(args[10]), eval(args[11]), eval(args[12]),))

elif cmd == 'movel_eaxis':
    if len(args) != 13:
        print('movel_eaxis requires 13 args')
        sys.exit(1)
    pp.pprint(client.movel_eaxis(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5], args[6], args[7], eval(args[8]), eval(args[9]), eval(args[10]), eval(args[11]), eval(args[12]),))

elif cmd == 'movec_eaxis':
    if len(args) != 15:
        print('movec_eaxis requires 15 args')
        sys.exit(1)
    pp.pprint(client.movec_eaxis(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), args[6], args[7], args[8], eval(args[9]), eval(args[10]), eval(args[11]), eval(args[12]), eval(args[13]), eval(args[14]),))

elif cmd == 'move_circle_eaxis':
    if len(args) != 15:
        print('move_circle_eaxis requires 15 args')
        sys.exit(1)
    pp.pprint(client.move_circle_eaxis(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), args[7], args[8], args[9], eval(args[10]), eval(args[11]), eval(args[12]), eval(args[13]), eval(args[14]),))

elif cmd == 'reach_check':
    if len(args) != 5:
        print('reach_check requires 5 args')
        sys.exit(1)
    pp.pprint(client.reach_check(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'move_jog_eaxis':
    if len(args) != 4:
        print('move_jog_eaxis requires 4 args')
        sys.exit(1)
    pp.pprint(client.move_jog_eaxis(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'get_eaxis_info':
    if len(args) != 0:
        print('get_eaxis_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_eaxis_info())

elif cmd == 'set_hand_teach_parameter':
    if len(args) != 5:
        print('set_hand_teach_parameter requires 5 args')
        sys.exit(1)
    pp.pprint(client.set_hand_teach_parameter(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'set_pendant_type':
    if len(args) != 1:
        print('set_pendant_type requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_pendant_type(eval(args[0]),))

elif cmd == 'set_blend_ahead':
    if len(args) != 2:
        print('set_blend_ahead requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_blend_ahead(eval(args[0]), eval(args[1]),))

elif cmd == 'switch_mode':
    if len(args) != 1:
        print('switch_mode requires 1 args')
        sys.exit(1)
    pp.pprint(client.switch_mode(eval(args[0]),))

elif cmd == 'read_encoder_count':
    if len(args) != 0:
        print('read_encoder_count requires 0 args')
        sys.exit(1)
    pp.pprint(client.read_encoder_count())

elif cmd == 'set_kinematic_calibration_params':
    if len(args) != 1:
        print('set_kinematic_calibration_params requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_kinematic_calibration_params(eval(args[0]),))

elif cmd == 'get_pos_bias':
    if len(args) != 0:
        print('get_pos_bias requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_pos_bias())

elif cmd == 'get_system_value_lists':
    if len(args) != 1:
        print('get_system_value_lists requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_system_value_lists(args[0],))

elif cmd == 'get_origin_DH':
    if len(args) != 0:
        print('get_origin_DH requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_origin_DH())

elif cmd == 'get_calib_DH':
    if len(args) != 0:
        print('get_calib_DH requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_calib_DH())

elif cmd == 'get_robot_type':
    if len(args) != 0:
        print('get_robot_type requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_robot_type())

elif cmd == 'get_ext_torque':
    if len(args) != 0:
        print('get_ext_torque requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_ext_torque())

elif cmd == 'set_dynamic_calibration_params':
    if len(args) != 1:
        print('set_dynamic_calibration_params requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_dynamic_calibration_params(eval(args[0]),))

elif cmd == 'get_dynamic_calibration_params':
    if len(args) != 0:
        print('get_dynamic_calibration_params requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_dynamic_calibration_params())

elif cmd == 'upload_robot_param_to_toolboard':
    if len(args) != 1:
        print('upload_robot_param_to_toolboard requires 1 args')
        sys.exit(1)
    pp.pprint(client.upload_robot_param_to_toolboard(args[0],))

elif cmd == 'set_kinematic_calibration_info':
    if len(args) != 2:
        print('set_kinematic_calibration_info requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_kinematic_calibration_info(args[0], args[1],))

elif cmd == 'set_dynamic_calibration_info':
    if len(args) != 2:
        print('set_dynamic_calibration_info requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_dynamic_calibration_info(args[0], args[1],))

elif cmd == 'set_vibration_calibration_info':
    if len(args) != 2:
        print('set_vibration_calibration_info requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_vibration_calibration_info(args[0], args[1],))

elif cmd == 'get_axis_motor_rated_current':
    if len(args) != 0:
        print('get_axis_motor_rated_current requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_axis_motor_rated_current())

elif cmd == 'get_axis_motor_kt':
    if len(args) != 0:
        print('get_axis_motor_kt requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_axis_motor_kt())

elif cmd == 'abort':
    if len(args) != 1:
        print('abort requires 1 args')
        sys.exit(1)
    pp.pprint(client.abort(eval(args[0]),))

elif cmd == 'get_vibration_calibration_params':
    if len(args) != 0:
        print('get_vibration_calibration_params requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_vibration_calibration_params())

elif cmd == 'save_kinematic_calibration_params':
    if len(args) != 1:
        print('save_kinematic_calibration_params requires 1 args')
        sys.exit(1)
    pp.pprint(client.save_kinematic_calibration_params(args[0],))

elif cmd == 'save_dynamic_calibration_params':
    if len(args) != 1:
        print('save_dynamic_calibration_params requires 1 args')
        sys.exit(1)
    pp.pprint(client.save_dynamic_calibration_params(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
